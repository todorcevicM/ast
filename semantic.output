Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: %empty

    5 function: TYPE ID $@1 LPAREN param_list RPAREN body

    6 $@2: %empty

    7 function: V_TYPE ID $@2 LPAREN param_list RPAREN body

    8 param_list: %empty
    9           | parameters

   10 parameters: parameter
   11           | parameters COMMA parameter

   12 parameter: TYPE ID

   13 body: LBRACKET variable_list statement_list RBRACKET

   14 variable_list: %empty
   15              | variable_list variable

   16 $@3: %empty

   17 variable: TYPE $@3 variables SEMICOLON

   18 variables: ID
   19          | variables COMMA ID

   20 statement_list: %empty
   21               | statements

   22 statements: statement
   23           | statements statement

   24 statement: compound_statement
   25          | assignment_statement
   26          | function_call SEMICOLON

   27 $@4: %empty

   28 statement: ID post_op $@4 SEMICOLON
   29          | if_statement
   30          | loop_statement
   31          | jiro_statement
   32          | return_statement

   33 compound_statement: LBRACKET statement_list RBRACKET

   34 assignment_statement: ID ASSIGN num_exp SEMICOLON

   35 num_exp: exp

   36 $@5: %empty

   37 $@6: %empty

   38 num_exp: num_exp $@5 AROP $@6 exp

   39 exp: literal
   40    | ID post_op_op
   41    | function_call
   42    | LPAREN num_exp RPAREN

   43 post_op: PINC
   44        | PDEC

   45 post_op_op: %empty
   46           | post_op

   47 literal: INT_NUMBER
   48        | UINT_NUMBER

   49 $@7: %empty

   50 function_call: ID $@7 LPAREN argument_s RPAREN

   51 argument_s: %empty
   52           | arguments

   53 arguments: num_exp
   54          | arguments COMMA num_exp

   55 if_statement: if_part
   56             | if_part ELSE statement

   57 if_part: IF LPAREN rel_exp RPAREN statement

   58 rel_exp: num_exp RELOP num_exp

   59 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt RPAREN statement

   60 loop_opt: %empty
   61         | COMMA literal

   62 $@8: %empty

   63 $@9: %empty

   64 jiro_statement: JIRO $@8 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@9 RBRACKET

   65 jiro_exp: ID

   66 $@10: %empty

   67 tranga_body: TRANGA literal $@10 DO statement finish_opt

   68 finish_opt: %empty
   69           | FINISH SEMICOLON

   70 tranga_opt: %empty
   71           | tranga_body tranga_opt

   72 toreana_opt: %empty
   73            | TOREANA DO statement

   74 return_statement: RETURN num_exp SEMICOLON
   75                 | RETURN SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <i> (258) 5 12 17
    V_TYPE <i> (259) 7
    ID <s> (260) 5 7 12 18 19 28 34 40 50 59 65
    INT_NUMBER <s> (261) 47
    UINT_NUMBER <s> (262) 48
    IF (263) 57
    ELSE (264) 56
    RETURN (265) 74 75
    LOOP (266) 59
    JIRO (267) 64
    TRANGA (268) 67
    TOREANA (269) 73
    FINISH (270) 69
    LABRACKET (271) 64
    RABRACKET (272) 64
    DO (273) 67 73
    SEMICOLON (274) 17 26 28 34 69 74 75
    COMMA (275) 11 19 54 59 61
    LPAREN (276) 5 7 42 50 57 59
    RPAREN (277) 5 7 42 50 57 59
    LBRACKET (278) 13 33 64
    RBRACKET (279) 13 33 64
    ASSIGN (280) 34
    AROP <i> (281) 38
    PINC (282) 43
    PDEC (283) 44
    RELOP <i> (284) 58
    ONLY_IF (285)


Nonterminals, with rules where they appear

    $accept (31)
        on left: 0
    program (32)
        on left: 1
        on right: 0
    function_list (33)
        on left: 2 3
        on right: 1 3
    function (34)
        on left: 5 7
        on right: 2 3
    $@1 (35)
        on left: 4
        on right: 5
    $@2 (36)
        on left: 6
        on right: 7
    param_list (37)
        on left: 8 9
        on right: 5 7
    parameters (38)
        on left: 10 11
        on right: 9 11
    parameter (39)
        on left: 12
        on right: 10 11
    body (40)
        on left: 13
        on right: 5 7
    variable_list (41)
        on left: 14 15
        on right: 13 15
    variable (42)
        on left: 17
        on right: 15
    $@3 (43)
        on left: 16
        on right: 17
    variables (44)
        on left: 18 19
        on right: 17 19
    statement_list (45)
        on left: 20 21
        on right: 13 33
    statements (46)
        on left: 22 23
        on right: 21 23
    statement (47)
        on left: 24 25 26 28 29 30 31 32
        on right: 22 23 56 57 59 67 73
    $@4 (48)
        on left: 27
        on right: 28
    compound_statement (49)
        on left: 33
        on right: 24
    assignment_statement (50)
        on left: 34
        on right: 25
    num_exp <i> (51)
        on left: 35 38
        on right: 34 38 42 53 54 58 74
    $@5 (52)
        on left: 36
        on right: 38
    $@6 (53)
        on left: 37
        on right: 38
    exp <i> (54)
        on left: 39 40 41 42
        on right: 35 38
    post_op (55)
        on left: 43 44
        on right: 28 46
    post_op_op (56)
        on left: 45 46
        on right: 40
    literal <i> (57)
        on left: 47 48
        on right: 39 59 61 67
    function_call <i> (58)
        on left: 50
        on right: 26 41
    $@7 (59)
        on left: 49
        on right: 50
    argument_s (60)
        on left: 51 52
        on right: 50
    arguments <i> (61)
        on left: 53 54
        on right: 52 54
    if_statement (62)
        on left: 55 56
        on right: 29
    if_part (63)
        on left: 57
        on right: 55 56
    rel_exp <i> (64)
        on left: 58
        on right: 57
    loop_statement (65)
        on left: 59
        on right: 30
    loop_opt (66)
        on left: 60 61
        on right: 59
    jiro_statement (67)
        on left: 64
        on right: 31
    $@8 (68)
        on left: 62
        on right: 64
    $@9 (69)
        on left: 63
        on right: 64
    jiro_exp (70)
        on left: 65
        on right: 64
    tranga_body (71)
        on left: 67
        on right: 64 71
    $@10 (72)
        on left: 66
        on right: 67
    finish_opt (73)
        on left: 68 69
        on right: 67
    tranga_opt (74)
        on left: 70 71
        on right: 64 71
    toreana_opt (75)
        on left: 72 73
        on right: 64
    return_statement (76)
        on left: 74 75
        on right: 32


State 0

    0 $accept: . program $end

    TYPE    shift, and go to state 1
    V_TYPE  shift, and go to state 2

    program        go to state 3
    function_list  go to state 4
    function       go to state 5


State 1

    5 function: TYPE . ID $@1 LPAREN param_list RPAREN body

    ID  shift, and go to state 6


State 2

    7 function: V_TYPE . ID $@2 LPAREN param_list RPAREN body

    ID  shift, and go to state 7


State 3

    0 $accept: program . $end

    $end  shift, and go to state 8


State 4

    1 program: function_list .
    3 function_list: function_list . function

    TYPE    shift, and go to state 1
    V_TYPE  shift, and go to state 2

    $default  reduce using rule 1 (program)

    function  go to state 9


State 5

    2 function_list: function .

    $default  reduce using rule 2 (function_list)


State 6

    5 function: TYPE ID . $@1 LPAREN param_list RPAREN body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 10


State 7

    7 function: V_TYPE ID . $@2 LPAREN param_list RPAREN body

    $default  reduce using rule 6 ($@2)

    $@2  go to state 11


State 8

    0 $accept: program $end .

    $default  accept


State 9

    3 function_list: function_list function .

    $default  reduce using rule 3 (function_list)


State 10

    5 function: TYPE ID $@1 . LPAREN param_list RPAREN body

    LPAREN  shift, and go to state 12


State 11

    7 function: V_TYPE ID $@2 . LPAREN param_list RPAREN body

    LPAREN  shift, and go to state 13


State 12

    5 function: TYPE ID $@1 LPAREN . param_list RPAREN body

    TYPE  shift, and go to state 14

    $default  reduce using rule 8 (param_list)

    param_list  go to state 15
    parameters  go to state 16
    parameter   go to state 17


State 13

    7 function: V_TYPE ID $@2 LPAREN . param_list RPAREN body

    TYPE  shift, and go to state 14

    $default  reduce using rule 8 (param_list)

    param_list  go to state 18
    parameters  go to state 16
    parameter   go to state 17


State 14

   12 parameter: TYPE . ID

    ID  shift, and go to state 19


State 15

    5 function: TYPE ID $@1 LPAREN param_list . RPAREN body

    RPAREN  shift, and go to state 20


State 16

    9 param_list: parameters .
   11 parameters: parameters . COMMA parameter

    COMMA  shift, and go to state 21

    $default  reduce using rule 9 (param_list)


State 17

   10 parameters: parameter .

    $default  reduce using rule 10 (parameters)


State 18

    7 function: V_TYPE ID $@2 LPAREN param_list . RPAREN body

    RPAREN  shift, and go to state 22


State 19

   12 parameter: TYPE ID .

    $default  reduce using rule 12 (parameter)


State 20

    5 function: TYPE ID $@1 LPAREN param_list RPAREN . body

    LBRACKET  shift, and go to state 23

    body  go to state 24


State 21

   11 parameters: parameters COMMA . parameter

    TYPE  shift, and go to state 14

    parameter  go to state 25


State 22

    7 function: V_TYPE ID $@2 LPAREN param_list RPAREN . body

    LBRACKET  shift, and go to state 23

    body  go to state 26


State 23

   13 body: LBRACKET . variable_list statement_list RBRACKET

    $default  reduce using rule 14 (variable_list)

    variable_list  go to state 27


State 24

    5 function: TYPE ID $@1 LPAREN param_list RPAREN body .

    $default  reduce using rule 5 (function)


State 25

   11 parameters: parameters COMMA parameter .

    $default  reduce using rule 11 (parameters)


State 26

    7 function: V_TYPE ID $@2 LPAREN param_list RPAREN body .

    $default  reduce using rule 7 (function)


State 27

   13 body: LBRACKET variable_list . statement_list RBRACKET
   15 variable_list: variable_list . variable

    TYPE      shift, and go to state 28
    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    $default  reduce using rule 20 (statement_list)

    variable              go to state 35
    statement_list        go to state 36
    statements            go to state 37
    statement             go to state 38
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 28

   17 variable: TYPE . $@3 variables SEMICOLON

    $default  reduce using rule 16 ($@3)

    $@3  go to state 47


State 29

   28 statement: ID . post_op $@4 SEMICOLON
   34 assignment_statement: ID . ASSIGN num_exp SEMICOLON
   50 function_call: ID . $@7 LPAREN argument_s RPAREN

    ASSIGN  shift, and go to state 48
    PINC    shift, and go to state 49
    PDEC    shift, and go to state 50

    $default  reduce using rule 49 ($@7)

    post_op  go to state 51
    $@7      go to state 52


State 30

   57 if_part: IF . LPAREN rel_exp RPAREN statement

    LPAREN  shift, and go to state 53


State 31

   74 return_statement: RETURN . num_exp SEMICOLON
   75                 | RETURN . SEMICOLON

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    SEMICOLON    shift, and go to state 57
    LPAREN       shift, and go to state 58

    num_exp        go to state 59
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 32

   59 loop_statement: LOOP . LPAREN ID COMMA literal COMMA literal loop_opt RPAREN statement

    LPAREN  shift, and go to state 63


State 33

   64 jiro_statement: JIRO . $@8 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@9 RBRACKET

    $default  reduce using rule 62 ($@8)

    $@8  go to state 64


State 34

   33 compound_statement: LBRACKET . statement_list RBRACKET

    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    $default  reduce using rule 20 (statement_list)

    statement_list        go to state 65
    statements            go to state 37
    statement             go to state 38
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 35

   15 variable_list: variable_list variable .

    $default  reduce using rule 15 (variable_list)


State 36

   13 body: LBRACKET variable_list statement_list . RBRACKET

    RBRACKET  shift, and go to state 66


State 37

   21 statement_list: statements .
   23 statements: statements . statement

    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    $default  reduce using rule 21 (statement_list)

    statement             go to state 67
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 38

   22 statements: statement .

    $default  reduce using rule 22 (statements)


State 39

   24 statement: compound_statement .

    $default  reduce using rule 24 (statement)


State 40

   25 statement: assignment_statement .

    $default  reduce using rule 25 (statement)


State 41

   26 statement: function_call . SEMICOLON

    SEMICOLON  shift, and go to state 68


State 42

   29 statement: if_statement .

    $default  reduce using rule 29 (statement)


State 43

   55 if_statement: if_part .
   56             | if_part . ELSE statement

    ELSE  shift, and go to state 69

    $default  reduce using rule 55 (if_statement)


State 44

   30 statement: loop_statement .

    $default  reduce using rule 30 (statement)


State 45

   31 statement: jiro_statement .

    $default  reduce using rule 31 (statement)


State 46

   32 statement: return_statement .

    $default  reduce using rule 32 (statement)


State 47

   17 variable: TYPE $@3 . variables SEMICOLON

    ID  shift, and go to state 70

    variables  go to state 71


State 48

   34 assignment_statement: ID ASSIGN . num_exp SEMICOLON

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 58

    num_exp        go to state 72
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 49

   43 post_op: PINC .

    $default  reduce using rule 43 (post_op)


State 50

   44 post_op: PDEC .

    $default  reduce using rule 44 (post_op)


State 51

   28 statement: ID post_op . $@4 SEMICOLON

    $default  reduce using rule 27 ($@4)

    $@4  go to state 73


State 52

   50 function_call: ID $@7 . LPAREN argument_s RPAREN

    LPAREN  shift, and go to state 74


State 53

   57 if_part: IF LPAREN . rel_exp RPAREN statement

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 58

    num_exp        go to state 75
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62
    rel_exp        go to state 76


State 54

   40 exp: ID . post_op_op
   50 function_call: ID . $@7 LPAREN argument_s RPAREN

    PINC  shift, and go to state 49
    PDEC  shift, and go to state 50

    LPAREN    reduce using rule 49 ($@7)
    $default  reduce using rule 45 (post_op_op)

    post_op     go to state 77
    post_op_op  go to state 78
    $@7         go to state 52


State 55

   47 literal: INT_NUMBER .

    $default  reduce using rule 47 (literal)


State 56

   48 literal: UINT_NUMBER .

    $default  reduce using rule 48 (literal)


State 57

   75 return_statement: RETURN SEMICOLON .

    $default  reduce using rule 75 (return_statement)


State 58

   42 exp: LPAREN . num_exp RPAREN

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 58

    num_exp        go to state 79
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 59

   38 num_exp: num_exp . $@5 AROP $@6 exp
   74 return_statement: RETURN num_exp . SEMICOLON

    SEMICOLON  shift, and go to state 80

    $default  reduce using rule 36 ($@5)

    $@5  go to state 81


State 60

   35 num_exp: exp .

    $default  reduce using rule 35 (num_exp)


State 61

   39 exp: literal .

    $default  reduce using rule 39 (exp)


State 62

   41 exp: function_call .

    $default  reduce using rule 41 (exp)


State 63

   59 loop_statement: LOOP LPAREN . ID COMMA literal COMMA literal loop_opt RPAREN statement

    ID  shift, and go to state 82


State 64

   64 jiro_statement: JIRO $@8 . LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@9 RBRACKET

    LABRACKET  shift, and go to state 83


State 65

   33 compound_statement: LBRACKET statement_list . RBRACKET

    RBRACKET  shift, and go to state 84


State 66

   13 body: LBRACKET variable_list statement_list RBRACKET .

    $default  reduce using rule 13 (body)


State 67

   23 statements: statements statement .

    $default  reduce using rule 23 (statements)


State 68

   26 statement: function_call SEMICOLON .

    $default  reduce using rule 26 (statement)


State 69

   56 if_statement: if_part ELSE . statement

    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    statement             go to state 85
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 70

   18 variables: ID .

    $default  reduce using rule 18 (variables)


State 71

   17 variable: TYPE $@3 variables . SEMICOLON
   19 variables: variables . COMMA ID

    SEMICOLON  shift, and go to state 86
    COMMA      shift, and go to state 87


State 72

   34 assignment_statement: ID ASSIGN num_exp . SEMICOLON
   38 num_exp: num_exp . $@5 AROP $@6 exp

    SEMICOLON  shift, and go to state 88

    $default  reduce using rule 36 ($@5)

    $@5  go to state 81


State 73

   28 statement: ID post_op $@4 . SEMICOLON

    SEMICOLON  shift, and go to state 89


State 74

   50 function_call: ID $@7 LPAREN . argument_s RPAREN

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 58

    $default  reduce using rule 51 (argument_s)

    num_exp        go to state 90
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62
    argument_s     go to state 91
    arguments      go to state 92


State 75

   38 num_exp: num_exp . $@5 AROP $@6 exp
   58 rel_exp: num_exp . RELOP num_exp

    RELOP  shift, and go to state 93

    $default  reduce using rule 36 ($@5)

    $@5  go to state 81


State 76

   57 if_part: IF LPAREN rel_exp . RPAREN statement

    RPAREN  shift, and go to state 94


State 77

   46 post_op_op: post_op .

    $default  reduce using rule 46 (post_op_op)


State 78

   40 exp: ID post_op_op .

    $default  reduce using rule 40 (exp)


State 79

   38 num_exp: num_exp . $@5 AROP $@6 exp
   42 exp: LPAREN num_exp . RPAREN

    RPAREN  shift, and go to state 95

    $default  reduce using rule 36 ($@5)

    $@5  go to state 81


State 80

   74 return_statement: RETURN num_exp SEMICOLON .

    $default  reduce using rule 74 (return_statement)


State 81

   38 num_exp: num_exp $@5 . AROP $@6 exp

    AROP  shift, and go to state 96


State 82

   59 loop_statement: LOOP LPAREN ID . COMMA literal COMMA literal loop_opt RPAREN statement

    COMMA  shift, and go to state 97


State 83

   64 jiro_statement: JIRO $@8 LABRACKET . jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@9 RBRACKET

    ID  shift, and go to state 98

    jiro_exp  go to state 99


State 84

   33 compound_statement: LBRACKET statement_list RBRACKET .

    $default  reduce using rule 33 (compound_statement)


State 85

   56 if_statement: if_part ELSE statement .

    $default  reduce using rule 56 (if_statement)


State 86

   17 variable: TYPE $@3 variables SEMICOLON .

    $default  reduce using rule 17 (variable)


State 87

   19 variables: variables COMMA . ID

    ID  shift, and go to state 100


State 88

   34 assignment_statement: ID ASSIGN num_exp SEMICOLON .

    $default  reduce using rule 34 (assignment_statement)


State 89

   28 statement: ID post_op $@4 SEMICOLON .

    $default  reduce using rule 28 (statement)


State 90

   38 num_exp: num_exp . $@5 AROP $@6 exp
   53 arguments: num_exp .

    AROP      reduce using rule 36 ($@5)
    $default  reduce using rule 53 (arguments)

    $@5  go to state 81


State 91

   50 function_call: ID $@7 LPAREN argument_s . RPAREN

    RPAREN  shift, and go to state 101


State 92

   52 argument_s: arguments .
   54 arguments: arguments . COMMA num_exp

    COMMA  shift, and go to state 102

    $default  reduce using rule 52 (argument_s)


State 93

   58 rel_exp: num_exp RELOP . num_exp

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 58

    num_exp        go to state 103
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 94

   57 if_part: IF LPAREN rel_exp RPAREN . statement

    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    statement             go to state 104
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 95

   42 exp: LPAREN num_exp RPAREN .

    $default  reduce using rule 42 (exp)


State 96

   38 num_exp: num_exp $@5 AROP . $@6 exp

    $default  reduce using rule 37 ($@6)

    $@6  go to state 105


State 97

   59 loop_statement: LOOP LPAREN ID COMMA . literal COMMA literal loop_opt RPAREN statement

    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56

    literal  go to state 106


State 98

   65 jiro_exp: ID .

    $default  reduce using rule 65 (jiro_exp)


State 99

   64 jiro_statement: JIRO $@8 LABRACKET jiro_exp . RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@9 RBRACKET

    RABRACKET  shift, and go to state 107


State 100

   19 variables: variables COMMA ID .

    $default  reduce using rule 19 (variables)


State 101

   50 function_call: ID $@7 LPAREN argument_s RPAREN .

    $default  reduce using rule 50 (function_call)


State 102

   54 arguments: arguments COMMA . num_exp

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 58

    num_exp        go to state 108
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 103

   38 num_exp: num_exp . $@5 AROP $@6 exp
   58 rel_exp: num_exp RELOP num_exp .

    RPAREN    reduce using rule 58 (rel_exp)
    $default  reduce using rule 36 ($@5)

    $@5  go to state 81


State 104

   57 if_part: IF LPAREN rel_exp RPAREN statement .

    $default  reduce using rule 57 (if_part)


State 105

   38 num_exp: num_exp $@5 AROP $@6 . exp

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 58

    exp            go to state 109
    literal        go to state 61
    function_call  go to state 62


State 106

   59 loop_statement: LOOP LPAREN ID COMMA literal . COMMA literal loop_opt RPAREN statement

    COMMA  shift, and go to state 110


State 107

   64 jiro_statement: JIRO $@8 LABRACKET jiro_exp RABRACKET . LBRACKET tranga_body tranga_opt toreana_opt $@9 RBRACKET

    LBRACKET  shift, and go to state 111


State 108

   38 num_exp: num_exp . $@5 AROP $@6 exp
   54 arguments: arguments COMMA num_exp .

    AROP      reduce using rule 36 ($@5)
    $default  reduce using rule 54 (arguments)

    $@5  go to state 81


State 109

   38 num_exp: num_exp $@5 AROP $@6 exp .

    $default  reduce using rule 38 (num_exp)


State 110

   59 loop_statement: LOOP LPAREN ID COMMA literal COMMA . literal loop_opt RPAREN statement

    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56

    literal  go to state 112


State 111

   64 jiro_statement: JIRO $@8 LABRACKET jiro_exp RABRACKET LBRACKET . tranga_body tranga_opt toreana_opt $@9 RBRACKET

    TRANGA  shift, and go to state 113

    tranga_body  go to state 114


State 112

   59 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal . loop_opt RPAREN statement

    COMMA  shift, and go to state 115

    $default  reduce using rule 60 (loop_opt)

    loop_opt  go to state 116


State 113

   67 tranga_body: TRANGA . literal $@10 DO statement finish_opt

    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56

    literal  go to state 117


State 114

   64 jiro_statement: JIRO $@8 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body . tranga_opt toreana_opt $@9 RBRACKET

    TRANGA  shift, and go to state 113

    $default  reduce using rule 70 (tranga_opt)

    tranga_body  go to state 118
    tranga_opt   go to state 119


State 115

   61 loop_opt: COMMA . literal

    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56

    literal  go to state 120


State 116

   59 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt . RPAREN statement

    RPAREN  shift, and go to state 121


State 117

   67 tranga_body: TRANGA literal . $@10 DO statement finish_opt

    $default  reduce using rule 66 ($@10)

    $@10  go to state 122


State 118

   71 tranga_opt: tranga_body . tranga_opt

    TRANGA  shift, and go to state 113

    $default  reduce using rule 70 (tranga_opt)

    tranga_body  go to state 118
    tranga_opt   go to state 123


State 119

   64 jiro_statement: JIRO $@8 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt . toreana_opt $@9 RBRACKET

    TOREANA  shift, and go to state 124

    $default  reduce using rule 72 (toreana_opt)

    toreana_opt  go to state 125


State 120

   61 loop_opt: COMMA literal .

    $default  reduce using rule 61 (loop_opt)


State 121

   59 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt RPAREN . statement

    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    statement             go to state 126
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 122

   67 tranga_body: TRANGA literal $@10 . DO statement finish_opt

    DO  shift, and go to state 127


State 123

   71 tranga_opt: tranga_body tranga_opt .

    $default  reduce using rule 71 (tranga_opt)


State 124

   73 toreana_opt: TOREANA . DO statement

    DO  shift, and go to state 128


State 125

   64 jiro_statement: JIRO $@8 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt . $@9 RBRACKET

    $default  reduce using rule 63 ($@9)

    $@9  go to state 129


State 126

   59 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt RPAREN statement .

    $default  reduce using rule 59 (loop_statement)


State 127

   67 tranga_body: TRANGA literal $@10 DO . statement finish_opt

    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    statement             go to state 130
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 128

   73 toreana_opt: TOREANA DO . statement

    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    statement             go to state 131
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 129

   64 jiro_statement: JIRO $@8 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@9 . RBRACKET

    RBRACKET  shift, and go to state 132


State 130

   67 tranga_body: TRANGA literal $@10 DO statement . finish_opt

    FINISH  shift, and go to state 133

    $default  reduce using rule 68 (finish_opt)

    finish_opt  go to state 134


State 131

   73 toreana_opt: TOREANA DO statement .

    $default  reduce using rule 73 (toreana_opt)


State 132

   64 jiro_statement: JIRO $@8 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@9 RBRACKET .

    $default  reduce using rule 64 (jiro_statement)


State 133

   69 finish_opt: FINISH . SEMICOLON

    SEMICOLON  shift, and go to state 135


State 134

   67 tranga_body: TRANGA literal $@10 DO statement finish_opt .

    $default  reduce using rule 67 (tranga_body)


State 135

   69 finish_opt: FINISH SEMICOLON .

    $default  reduce using rule 69 (finish_opt)
