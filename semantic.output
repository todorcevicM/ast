Grammar

    0 $accept: program $end

    1 program: init_program function_list

    2 init_program: INIT SEMICOLON

    3 function_list: function
    4              | function_list function

    5 $@1: %empty

    6 function: TYPE ID $@1 LPAREN param_list RPAREN body

    7 $@2: %empty

    8 function: V_TYPE ID $@2 LPAREN param_list RPAREN body

    9 param_list: %empty
   10           | parameters

   11 parameters: parameter
   12           | parameters COMMA parameter

   13 parameter: TYPE ID

   14 body: LBRACKET variable_list statement_list RBRACKET

   15 variable_list: %empty
   16              | variable_list variable

   17 $@3: %empty

   18 variable: TYPE $@3 variables SEMICOLON

   19 variables: ID
   20          | variables COMMA ID

   21 statement_list: %empty
   22               | statements

   23 statements: statement
   24           | statements statement

   25 statement: compound_statement
   26          | assignment_statement
   27          | function_call SEMICOLON
   28          | if_statement
   29          | loop_statement
   30          | jiro_statement
   31          | return_statement

   32 compound_statement: LBRACKET statement_list RBRACKET

   33 assignment_statement: ID ASSIGN num_exp SEMICOLON

   34 num_exp: exp
   35        | num_exp AROP exp

   36 exp: literal
   37    | ID post_op
   38    | function_call
   39    | LPAREN num_exp RPAREN

   40 post_op: %empty
   41        | PINC
   42        | PDEC

   43 literal: INT_NUMBER
   44        | UINT_NUMBER

   45 $@4: %empty

   46 function_call: ID $@4 LPAREN argument_s RPAREN

   47 argument_s: %empty
   48           | arguments

   49 arguments: num_exp
   50          | arguments COMMA num_exp

   51 if_statement: if_part
   52             | if_part ELSE statement

   53 if_part: IF LPAREN rel_exp RPAREN statement

   54 rel_exp: num_exp RELOP num_exp

   55 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt RPAREN statement

   56 loop_opt: %empty
   57         | COMMA literal

   58 $@5: %empty

   59 $@6: %empty

   60 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@6 RBRACKET

   61 jiro_exp: ID

   62 $@7: %empty

   63 tranga_body: TRANGA literal $@7 DO statement finish_opt

   64 finish_opt: %empty
   65           | FINISH SEMICOLON

   66 tranga_opt: %empty
   67           | tranga_body tranga_opt

   68 toreana_opt: %empty
   69            | TOREANA DO statement

   70 return_statement: RETURN num_exp SEMICOLON
   71                 | RETURN SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INIT (258) 2
    TYPE <i> (259) 6 13 18
    V_TYPE <i> (260) 8
    ID <s> (261) 6 8 13 19 20 33 37 46 55 61
    INT_NUMBER <s> (262) 43
    UINT_NUMBER <s> (263) 44
    IF (264) 53
    ELSE (265) 52
    RETURN (266) 70 71
    LOOP (267) 55
    JIRO (268) 60
    TRANGA (269) 63
    TOREANA (270) 69
    FINISH (271) 65
    LABRACKET (272) 60
    RABRACKET (273) 60
    DO (274) 63 69
    SEMICOLON (275) 2 18 27 33 65 70 71
    COMMA (276) 12 20 50 55 57
    LPAREN (277) 6 8 39 46 53 55
    RPAREN (278) 6 8 39 46 53 55
    LBRACKET (279) 14 32 60
    RBRACKET (280) 14 32 60
    ASSIGN (281) 33
    AROP <i> (282) 35
    PINC (283) 41
    PDEC (284) 42
    RELOP <i> (285) 54
    ONLY_IF (286)


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1
        on right: 0
    init_program (34)
        on left: 2
        on right: 1
    function_list (35)
        on left: 3 4
        on right: 1 4
    function (36)
        on left: 6 8
        on right: 3 4
    $@1 (37)
        on left: 5
        on right: 6
    $@2 (38)
        on left: 7
        on right: 8
    param_list (39)
        on left: 9 10
        on right: 6 8
    parameters (40)
        on left: 11 12
        on right: 10 12
    parameter (41)
        on left: 13
        on right: 11 12
    body (42)
        on left: 14
        on right: 6 8
    variable_list (43)
        on left: 15 16
        on right: 14 16
    variable (44)
        on left: 18
        on right: 16
    $@3 (45)
        on left: 17
        on right: 18
    variables (46)
        on left: 19 20
        on right: 18 20
    statement_list (47)
        on left: 21 22
        on right: 14 32
    statements (48)
        on left: 23 24
        on right: 22 24
    statement (49)
        on left: 25 26 27 28 29 30 31
        on right: 23 24 52 53 55 63 69
    compound_statement (50)
        on left: 32
        on right: 25
    assignment_statement (51)
        on left: 33
        on right: 26
    num_exp <i> (52)
        on left: 34 35
        on right: 33 35 39 49 50 54 70
    exp <i> (53)
        on left: 36 37 38 39
        on right: 34 35
    post_op (54)
        on left: 40 41 42
        on right: 37
    literal <i> (55)
        on left: 43 44
        on right: 36 55 57 63
    function_call <i> (56)
        on left: 46
        on right: 27 38
    $@4 (57)
        on left: 45
        on right: 46
    argument_s (58)
        on left: 47 48
        on right: 46
    arguments <i> (59)
        on left: 49 50
        on right: 48 50
    if_statement (60)
        on left: 51 52
        on right: 28
    if_part (61)
        on left: 53
        on right: 51 52
    rel_exp <i> (62)
        on left: 54
        on right: 53
    loop_statement (63)
        on left: 55
        on right: 29
    loop_opt (64)
        on left: 56 57
        on right: 55
    jiro_statement (65)
        on left: 60
        on right: 30
    $@5 (66)
        on left: 58
        on right: 60
    $@6 (67)
        on left: 59
        on right: 60
    jiro_exp (68)
        on left: 61
        on right: 60
    tranga_body (69)
        on left: 63
        on right: 60 67
    $@7 (70)
        on left: 62
        on right: 63
    finish_opt (71)
        on left: 64 65
        on right: 63
    tranga_opt (72)
        on left: 66 67
        on right: 60 67
    toreana_opt (73)
        on left: 68 69
        on right: 60
    return_statement (74)
        on left: 70 71
        on right: 31


State 0

    0 $accept: . program $end

    INIT  shift, and go to state 1

    program       go to state 2
    init_program  go to state 3


State 1

    2 init_program: INIT . SEMICOLON

    SEMICOLON  shift, and go to state 4


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

    1 program: init_program . function_list

    TYPE    shift, and go to state 6
    V_TYPE  shift, and go to state 7

    function_list  go to state 8
    function       go to state 9


State 4

    2 init_program: INIT SEMICOLON .

    $default  reduce using rule 2 (init_program)


State 5

    0 $accept: program $end .

    $default  accept


State 6

    6 function: TYPE . ID $@1 LPAREN param_list RPAREN body

    ID  shift, and go to state 10


State 7

    8 function: V_TYPE . ID $@2 LPAREN param_list RPAREN body

    ID  shift, and go to state 11


State 8

    1 program: init_program function_list .
    4 function_list: function_list . function

    TYPE    shift, and go to state 6
    V_TYPE  shift, and go to state 7

    $default  reduce using rule 1 (program)

    function  go to state 12


State 9

    3 function_list: function .

    $default  reduce using rule 3 (function_list)


State 10

    6 function: TYPE ID . $@1 LPAREN param_list RPAREN body

    $default  reduce using rule 5 ($@1)

    $@1  go to state 13


State 11

    8 function: V_TYPE ID . $@2 LPAREN param_list RPAREN body

    $default  reduce using rule 7 ($@2)

    $@2  go to state 14


State 12

    4 function_list: function_list function .

    $default  reduce using rule 4 (function_list)


State 13

    6 function: TYPE ID $@1 . LPAREN param_list RPAREN body

    LPAREN  shift, and go to state 15


State 14

    8 function: V_TYPE ID $@2 . LPAREN param_list RPAREN body

    LPAREN  shift, and go to state 16


State 15

    6 function: TYPE ID $@1 LPAREN . param_list RPAREN body

    TYPE  shift, and go to state 17

    $default  reduce using rule 9 (param_list)

    param_list  go to state 18
    parameters  go to state 19
    parameter   go to state 20


State 16

    8 function: V_TYPE ID $@2 LPAREN . param_list RPAREN body

    TYPE  shift, and go to state 17

    $default  reduce using rule 9 (param_list)

    param_list  go to state 21
    parameters  go to state 19
    parameter   go to state 20


State 17

   13 parameter: TYPE . ID

    ID  shift, and go to state 22


State 18

    6 function: TYPE ID $@1 LPAREN param_list . RPAREN body

    RPAREN  shift, and go to state 23


State 19

   10 param_list: parameters .
   12 parameters: parameters . COMMA parameter

    COMMA  shift, and go to state 24

    $default  reduce using rule 10 (param_list)


State 20

   11 parameters: parameter .

    $default  reduce using rule 11 (parameters)


State 21

    8 function: V_TYPE ID $@2 LPAREN param_list . RPAREN body

    RPAREN  shift, and go to state 25


State 22

   13 parameter: TYPE ID .

    $default  reduce using rule 13 (parameter)


State 23

    6 function: TYPE ID $@1 LPAREN param_list RPAREN . body

    LBRACKET  shift, and go to state 26

    body  go to state 27


State 24

   12 parameters: parameters COMMA . parameter

    TYPE  shift, and go to state 17

    parameter  go to state 28


State 25

    8 function: V_TYPE ID $@2 LPAREN param_list RPAREN . body

    LBRACKET  shift, and go to state 26

    body  go to state 29


State 26

   14 body: LBRACKET . variable_list statement_list RBRACKET

    $default  reduce using rule 15 (variable_list)

    variable_list  go to state 30


State 27

    6 function: TYPE ID $@1 LPAREN param_list RPAREN body .

    $default  reduce using rule 6 (function)


State 28

   12 parameters: parameters COMMA parameter .

    $default  reduce using rule 12 (parameters)


State 29

    8 function: V_TYPE ID $@2 LPAREN param_list RPAREN body .

    $default  reduce using rule 8 (function)


State 30

   14 body: LBRACKET variable_list . statement_list RBRACKET
   16 variable_list: variable_list . variable

    TYPE      shift, and go to state 31
    ID        shift, and go to state 32
    IF        shift, and go to state 33
    RETURN    shift, and go to state 34
    LOOP      shift, and go to state 35
    JIRO      shift, and go to state 36
    LBRACKET  shift, and go to state 37

    $default  reduce using rule 21 (statement_list)

    variable              go to state 38
    statement_list        go to state 39
    statements            go to state 40
    statement             go to state 41
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    loop_statement        go to state 47
    jiro_statement        go to state 48
    return_statement      go to state 49


State 31

   18 variable: TYPE . $@3 variables SEMICOLON

    $default  reduce using rule 17 ($@3)

    $@3  go to state 50


State 32

   33 assignment_statement: ID . ASSIGN num_exp SEMICOLON
   46 function_call: ID . $@4 LPAREN argument_s RPAREN

    ASSIGN  shift, and go to state 51

    $default  reduce using rule 45 ($@4)

    $@4  go to state 52


State 33

   53 if_part: IF . LPAREN rel_exp RPAREN statement

    LPAREN  shift, and go to state 53


State 34

   70 return_statement: RETURN . num_exp SEMICOLON
   71                 | RETURN . SEMICOLON

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    SEMICOLON    shift, and go to state 57
    LPAREN       shift, and go to state 58

    num_exp        go to state 59
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 35

   55 loop_statement: LOOP . LPAREN ID COMMA literal COMMA literal loop_opt RPAREN statement

    LPAREN  shift, and go to state 63


State 36

   60 jiro_statement: JIRO . $@5 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@6 RBRACKET

    $default  reduce using rule 58 ($@5)

    $@5  go to state 64


State 37

   32 compound_statement: LBRACKET . statement_list RBRACKET

    ID        shift, and go to state 32
    IF        shift, and go to state 33
    RETURN    shift, and go to state 34
    LOOP      shift, and go to state 35
    JIRO      shift, and go to state 36
    LBRACKET  shift, and go to state 37

    $default  reduce using rule 21 (statement_list)

    statement_list        go to state 65
    statements            go to state 40
    statement             go to state 41
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    loop_statement        go to state 47
    jiro_statement        go to state 48
    return_statement      go to state 49


State 38

   16 variable_list: variable_list variable .

    $default  reduce using rule 16 (variable_list)


State 39

   14 body: LBRACKET variable_list statement_list . RBRACKET

    RBRACKET  shift, and go to state 66


State 40

   22 statement_list: statements .
   24 statements: statements . statement

    ID        shift, and go to state 32
    IF        shift, and go to state 33
    RETURN    shift, and go to state 34
    LOOP      shift, and go to state 35
    JIRO      shift, and go to state 36
    LBRACKET  shift, and go to state 37

    $default  reduce using rule 22 (statement_list)

    statement             go to state 67
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    loop_statement        go to state 47
    jiro_statement        go to state 48
    return_statement      go to state 49


State 41

   23 statements: statement .

    $default  reduce using rule 23 (statements)


State 42

   25 statement: compound_statement .

    $default  reduce using rule 25 (statement)


State 43

   26 statement: assignment_statement .

    $default  reduce using rule 26 (statement)


State 44

   27 statement: function_call . SEMICOLON

    SEMICOLON  shift, and go to state 68


State 45

   28 statement: if_statement .

    $default  reduce using rule 28 (statement)


State 46

   51 if_statement: if_part .
   52             | if_part . ELSE statement

    ELSE  shift, and go to state 69

    $default  reduce using rule 51 (if_statement)


State 47

   29 statement: loop_statement .

    $default  reduce using rule 29 (statement)


State 48

   30 statement: jiro_statement .

    $default  reduce using rule 30 (statement)


State 49

   31 statement: return_statement .

    $default  reduce using rule 31 (statement)


State 50

   18 variable: TYPE $@3 . variables SEMICOLON

    ID  shift, and go to state 70

    variables  go to state 71


State 51

   33 assignment_statement: ID ASSIGN . num_exp SEMICOLON

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 58

    num_exp        go to state 72
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 52

   46 function_call: ID $@4 . LPAREN argument_s RPAREN

    LPAREN  shift, and go to state 73


State 53

   53 if_part: IF LPAREN . rel_exp RPAREN statement

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 58

    num_exp        go to state 74
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62
    rel_exp        go to state 75


State 54

   37 exp: ID . post_op
   46 function_call: ID . $@4 LPAREN argument_s RPAREN

    PINC  shift, and go to state 76
    PDEC  shift, and go to state 77

    LPAREN    reduce using rule 45 ($@4)
    $default  reduce using rule 40 (post_op)

    post_op  go to state 78
    $@4      go to state 52


State 55

   43 literal: INT_NUMBER .

    $default  reduce using rule 43 (literal)


State 56

   44 literal: UINT_NUMBER .

    $default  reduce using rule 44 (literal)


State 57

   71 return_statement: RETURN SEMICOLON .

    $default  reduce using rule 71 (return_statement)


State 58

   39 exp: LPAREN . num_exp RPAREN

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 58

    num_exp        go to state 79
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 59

   35 num_exp: num_exp . AROP exp
   70 return_statement: RETURN num_exp . SEMICOLON

    SEMICOLON  shift, and go to state 80
    AROP       shift, and go to state 81


State 60

   34 num_exp: exp .

    $default  reduce using rule 34 (num_exp)


State 61

   36 exp: literal .

    $default  reduce using rule 36 (exp)


State 62

   38 exp: function_call .

    $default  reduce using rule 38 (exp)


State 63

   55 loop_statement: LOOP LPAREN . ID COMMA literal COMMA literal loop_opt RPAREN statement

    ID  shift, and go to state 82


State 64

   60 jiro_statement: JIRO $@5 . LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@6 RBRACKET

    LABRACKET  shift, and go to state 83


State 65

   32 compound_statement: LBRACKET statement_list . RBRACKET

    RBRACKET  shift, and go to state 84


State 66

   14 body: LBRACKET variable_list statement_list RBRACKET .

    $default  reduce using rule 14 (body)


State 67

   24 statements: statements statement .

    $default  reduce using rule 24 (statements)


State 68

   27 statement: function_call SEMICOLON .

    $default  reduce using rule 27 (statement)


State 69

   52 if_statement: if_part ELSE . statement

    ID        shift, and go to state 32
    IF        shift, and go to state 33
    RETURN    shift, and go to state 34
    LOOP      shift, and go to state 35
    JIRO      shift, and go to state 36
    LBRACKET  shift, and go to state 37

    statement             go to state 85
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    loop_statement        go to state 47
    jiro_statement        go to state 48
    return_statement      go to state 49


State 70

   19 variables: ID .

    $default  reduce using rule 19 (variables)


State 71

   18 variable: TYPE $@3 variables . SEMICOLON
   20 variables: variables . COMMA ID

    SEMICOLON  shift, and go to state 86
    COMMA      shift, and go to state 87


State 72

   33 assignment_statement: ID ASSIGN num_exp . SEMICOLON
   35 num_exp: num_exp . AROP exp

    SEMICOLON  shift, and go to state 88
    AROP       shift, and go to state 81


State 73

   46 function_call: ID $@4 LPAREN . argument_s RPAREN

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 58

    $default  reduce using rule 47 (argument_s)

    num_exp        go to state 89
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62
    argument_s     go to state 90
    arguments      go to state 91


State 74

   35 num_exp: num_exp . AROP exp
   54 rel_exp: num_exp . RELOP num_exp

    AROP   shift, and go to state 81
    RELOP  shift, and go to state 92


State 75

   53 if_part: IF LPAREN rel_exp . RPAREN statement

    RPAREN  shift, and go to state 93


State 76

   41 post_op: PINC .

    $default  reduce using rule 41 (post_op)


State 77

   42 post_op: PDEC .

    $default  reduce using rule 42 (post_op)


State 78

   37 exp: ID post_op .

    $default  reduce using rule 37 (exp)


State 79

   35 num_exp: num_exp . AROP exp
   39 exp: LPAREN num_exp . RPAREN

    RPAREN  shift, and go to state 94
    AROP    shift, and go to state 81


State 80

   70 return_statement: RETURN num_exp SEMICOLON .

    $default  reduce using rule 70 (return_statement)


State 81

   35 num_exp: num_exp AROP . exp

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 58

    exp            go to state 95
    literal        go to state 61
    function_call  go to state 62


State 82

   55 loop_statement: LOOP LPAREN ID . COMMA literal COMMA literal loop_opt RPAREN statement

    COMMA  shift, and go to state 96


State 83

   60 jiro_statement: JIRO $@5 LABRACKET . jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@6 RBRACKET

    ID  shift, and go to state 97

    jiro_exp  go to state 98


State 84

   32 compound_statement: LBRACKET statement_list RBRACKET .

    $default  reduce using rule 32 (compound_statement)


State 85

   52 if_statement: if_part ELSE statement .

    $default  reduce using rule 52 (if_statement)


State 86

   18 variable: TYPE $@3 variables SEMICOLON .

    $default  reduce using rule 18 (variable)


State 87

   20 variables: variables COMMA . ID

    ID  shift, and go to state 99


State 88

   33 assignment_statement: ID ASSIGN num_exp SEMICOLON .

    $default  reduce using rule 33 (assignment_statement)


State 89

   35 num_exp: num_exp . AROP exp
   49 arguments: num_exp .

    AROP  shift, and go to state 81

    $default  reduce using rule 49 (arguments)


State 90

   46 function_call: ID $@4 LPAREN argument_s . RPAREN

    RPAREN  shift, and go to state 100


State 91

   48 argument_s: arguments .
   50 arguments: arguments . COMMA num_exp

    COMMA  shift, and go to state 101

    $default  reduce using rule 48 (argument_s)


State 92

   54 rel_exp: num_exp RELOP . num_exp

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 58

    num_exp        go to state 102
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 93

   53 if_part: IF LPAREN rel_exp RPAREN . statement

    ID        shift, and go to state 32
    IF        shift, and go to state 33
    RETURN    shift, and go to state 34
    LOOP      shift, and go to state 35
    JIRO      shift, and go to state 36
    LBRACKET  shift, and go to state 37

    statement             go to state 103
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    loop_statement        go to state 47
    jiro_statement        go to state 48
    return_statement      go to state 49


State 94

   39 exp: LPAREN num_exp RPAREN .

    $default  reduce using rule 39 (exp)


State 95

   35 num_exp: num_exp AROP exp .

    $default  reduce using rule 35 (num_exp)


State 96

   55 loop_statement: LOOP LPAREN ID COMMA . literal COMMA literal loop_opt RPAREN statement

    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56

    literal  go to state 104


State 97

   61 jiro_exp: ID .

    $default  reduce using rule 61 (jiro_exp)


State 98

   60 jiro_statement: JIRO $@5 LABRACKET jiro_exp . RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@6 RBRACKET

    RABRACKET  shift, and go to state 105


State 99

   20 variables: variables COMMA ID .

    $default  reduce using rule 20 (variables)


State 100

   46 function_call: ID $@4 LPAREN argument_s RPAREN .

    $default  reduce using rule 46 (function_call)


State 101

   50 arguments: arguments COMMA . num_exp

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 58

    num_exp        go to state 106
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 102

   35 num_exp: num_exp . AROP exp
   54 rel_exp: num_exp RELOP num_exp .

    AROP  shift, and go to state 81

    $default  reduce using rule 54 (rel_exp)


State 103

   53 if_part: IF LPAREN rel_exp RPAREN statement .

    $default  reduce using rule 53 (if_part)


State 104

   55 loop_statement: LOOP LPAREN ID COMMA literal . COMMA literal loop_opt RPAREN statement

    COMMA  shift, and go to state 107


State 105

   60 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET . LBRACKET tranga_body tranga_opt toreana_opt $@6 RBRACKET

    LBRACKET  shift, and go to state 108


State 106

   35 num_exp: num_exp . AROP exp
   50 arguments: arguments COMMA num_exp .

    AROP  shift, and go to state 81

    $default  reduce using rule 50 (arguments)


State 107

   55 loop_statement: LOOP LPAREN ID COMMA literal COMMA . literal loop_opt RPAREN statement

    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56

    literal  go to state 109


State 108

   60 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET LBRACKET . tranga_body tranga_opt toreana_opt $@6 RBRACKET

    TRANGA  shift, and go to state 110

    tranga_body  go to state 111


State 109

   55 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal . loop_opt RPAREN statement

    COMMA  shift, and go to state 112

    $default  reduce using rule 56 (loop_opt)

    loop_opt  go to state 113


State 110

   63 tranga_body: TRANGA . literal $@7 DO statement finish_opt

    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56

    literal  go to state 114


State 111

   60 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body . tranga_opt toreana_opt $@6 RBRACKET

    TRANGA  shift, and go to state 110

    $default  reduce using rule 66 (tranga_opt)

    tranga_body  go to state 115
    tranga_opt   go to state 116


State 112

   57 loop_opt: COMMA . literal

    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56

    literal  go to state 117


State 113

   55 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt . RPAREN statement

    RPAREN  shift, and go to state 118


State 114

   63 tranga_body: TRANGA literal . $@7 DO statement finish_opt

    $default  reduce using rule 62 ($@7)

    $@7  go to state 119


State 115

   67 tranga_opt: tranga_body . tranga_opt

    TRANGA  shift, and go to state 110

    $default  reduce using rule 66 (tranga_opt)

    tranga_body  go to state 115
    tranga_opt   go to state 120


State 116

   60 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt . toreana_opt $@6 RBRACKET

    TOREANA  shift, and go to state 121

    $default  reduce using rule 68 (toreana_opt)

    toreana_opt  go to state 122


State 117

   57 loop_opt: COMMA literal .

    $default  reduce using rule 57 (loop_opt)


State 118

   55 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt RPAREN . statement

    ID        shift, and go to state 32
    IF        shift, and go to state 33
    RETURN    shift, and go to state 34
    LOOP      shift, and go to state 35
    JIRO      shift, and go to state 36
    LBRACKET  shift, and go to state 37

    statement             go to state 123
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    loop_statement        go to state 47
    jiro_statement        go to state 48
    return_statement      go to state 49


State 119

   63 tranga_body: TRANGA literal $@7 . DO statement finish_opt

    DO  shift, and go to state 124


State 120

   67 tranga_opt: tranga_body tranga_opt .

    $default  reduce using rule 67 (tranga_opt)


State 121

   69 toreana_opt: TOREANA . DO statement

    DO  shift, and go to state 125


State 122

   60 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt . $@6 RBRACKET

    $default  reduce using rule 59 ($@6)

    $@6  go to state 126


State 123

   55 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt RPAREN statement .

    $default  reduce using rule 55 (loop_statement)


State 124

   63 tranga_body: TRANGA literal $@7 DO . statement finish_opt

    ID        shift, and go to state 32
    IF        shift, and go to state 33
    RETURN    shift, and go to state 34
    LOOP      shift, and go to state 35
    JIRO      shift, and go to state 36
    LBRACKET  shift, and go to state 37

    statement             go to state 127
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    loop_statement        go to state 47
    jiro_statement        go to state 48
    return_statement      go to state 49


State 125

   69 toreana_opt: TOREANA DO . statement

    ID        shift, and go to state 32
    IF        shift, and go to state 33
    RETURN    shift, and go to state 34
    LOOP      shift, and go to state 35
    JIRO      shift, and go to state 36
    LBRACKET  shift, and go to state 37

    statement             go to state 128
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    loop_statement        go to state 47
    jiro_statement        go to state 48
    return_statement      go to state 49


State 126

   60 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@6 . RBRACKET

    RBRACKET  shift, and go to state 129


State 127

   63 tranga_body: TRANGA literal $@7 DO statement . finish_opt

    FINISH  shift, and go to state 130

    $default  reduce using rule 64 (finish_opt)

    finish_opt  go to state 131


State 128

   69 toreana_opt: TOREANA DO statement .

    $default  reduce using rule 69 (toreana_opt)


State 129

   60 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@6 RBRACKET .

    $default  reduce using rule 60 (jiro_statement)


State 130

   65 finish_opt: FINISH . SEMICOLON

    SEMICOLON  shift, and go to state 132


State 131

   63 tranga_body: TRANGA literal $@7 DO statement finish_opt .

    $default  reduce using rule 63 (tranga_body)


State 132

   65 finish_opt: FINISH SEMICOLON .

    $default  reduce using rule 65 (finish_opt)
