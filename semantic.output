Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: %empty

    5 function: TYPE ID $@1 LPAREN param_list RPAREN body

    6 $@2: %empty

    7 function: V_TYPE ID $@2 LPAREN param_list RPAREN body

    8 param_list: %empty
    9           | parameters

   10 parameters: parameter
   11           | parameters COMMA parameter

   12 parameter: TYPE ID

   13 body: LBRACKET variable_list statement_list RBRACKET

   14 variable_list: %empty
   15              | variable_list variable

   16 $@3: %empty

   17 variable: TYPE $@3 variables SEMICOLON

   18 variables: ID
   19          | variables COMMA ID

   20 statement_list: %empty
   21               | statements

   22 statements: statement
   23           | statements statement

   24 statement: compound_statement
   25          | assignment_statement
   26          | function_call SEMICOLON
   27          | if_statement
   28          | loop_statement
   29          | jiro_statement
   30          | return_statement

   31 compound_statement: LBRACKET statement_list RBRACKET

   32 assignment_statement: ID ASSIGN num_exp SEMICOLON

   33 num_exp: exp
   34        | num_exp AROP exp

   35 exp: literal
   36    | ID post_op
   37    | function_call
   38    | LPAREN num_exp RPAREN

   39 post_op: %empty
   40        | PINC
   41        | PDEC

   42 literal: INT_NUMBER
   43        | UINT_NUMBER

   44 $@4: %empty

   45 function_call: ID $@4 LPAREN argument_s RPAREN

   46 argument_s: %empty
   47           | arguments

   48 arguments: num_exp
   49          | arguments COMMA num_exp

   50 if_statement: if_part
   51             | if_part ELSE statement

   52 if_part: IF LPAREN rel_exp RPAREN statement

   53 rel_exp: num_exp RELOP num_exp

   54 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt RPAREN statement

   55 loop_opt: %empty
   56         | COMMA literal

   57 $@5: %empty

   58 $@6: %empty

   59 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@6 RBRACKET

   60 jiro_exp: ID

   61 $@7: %empty

   62 tranga_body: TRANGA literal $@7 DO statement finish_opt

   63 finish_opt: %empty
   64           | FINISH SEMICOLON

   65 tranga_opt: %empty
   66           | tranga_body tranga_opt

   67 toreana_opt: %empty
   68            | TOREANA DO statement

   69 return_statement: RETURN num_exp SEMICOLON
   70                 | RETURN SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <i> (258) 5 12 17
    V_TYPE <i> (259) 7
    ID <s> (260) 5 7 12 18 19 32 36 45 54 60
    INT_NUMBER <s> (261) 42
    UINT_NUMBER <s> (262) 43
    IF (263) 52
    ELSE (264) 51
    RETURN (265) 69 70
    LOOP (266) 54
    JIRO (267) 59
    TRANGA (268) 62
    TOREANA (269) 68
    FINISH (270) 64
    LABRACKET (271) 59
    RABRACKET (272) 59
    DO (273) 62 68
    SEMICOLON (274) 17 26 32 64 69 70
    COMMA (275) 11 19 49 54 56
    LPAREN (276) 5 7 38 45 52 54
    RPAREN (277) 5 7 38 45 52 54
    LBRACKET (278) 13 31 59
    RBRACKET (279) 13 31 59
    ASSIGN (280) 32
    AROP <i> (281) 34
    PINC (282) 40
    PDEC (283) 41
    RELOP <i> (284) 53
    ONLY_IF (285)


Nonterminals, with rules where they appear

    $accept (31)
        on left: 0
    program (32)
        on left: 1
        on right: 0
    function_list (33)
        on left: 2 3
        on right: 1 3
    function (34)
        on left: 5 7
        on right: 2 3
    $@1 (35)
        on left: 4
        on right: 5
    $@2 (36)
        on left: 6
        on right: 7
    param_list (37)
        on left: 8 9
        on right: 5 7
    parameters (38)
        on left: 10 11
        on right: 9 11
    parameter (39)
        on left: 12
        on right: 10 11
    body (40)
        on left: 13
        on right: 5 7
    variable_list (41)
        on left: 14 15
        on right: 13 15
    variable (42)
        on left: 17
        on right: 15
    $@3 (43)
        on left: 16
        on right: 17
    variables (44)
        on left: 18 19
        on right: 17 19
    statement_list (45)
        on left: 20 21
        on right: 13 31
    statements (46)
        on left: 22 23
        on right: 21 23
    statement (47)
        on left: 24 25 26 27 28 29 30
        on right: 22 23 51 52 54 62 68
    compound_statement (48)
        on left: 31
        on right: 24
    assignment_statement (49)
        on left: 32
        on right: 25
    num_exp <i> (50)
        on left: 33 34
        on right: 32 34 38 48 49 53 69
    exp <i> (51)
        on left: 35 36 37 38
        on right: 33 34
    post_op (52)
        on left: 39 40 41
        on right: 36
    literal <i> (53)
        on left: 42 43
        on right: 35 54 56 62
    function_call <i> (54)
        on left: 45
        on right: 26 37
    $@4 (55)
        on left: 44
        on right: 45
    argument_s (56)
        on left: 46 47
        on right: 45
    arguments <i> (57)
        on left: 48 49
        on right: 47 49
    if_statement (58)
        on left: 50 51
        on right: 27
    if_part (59)
        on left: 52
        on right: 50 51
    rel_exp <i> (60)
        on left: 53
        on right: 52
    loop_statement (61)
        on left: 54
        on right: 28
    loop_opt (62)
        on left: 55 56
        on right: 54
    jiro_statement (63)
        on left: 59
        on right: 29
    $@5 (64)
        on left: 57
        on right: 59
    $@6 (65)
        on left: 58
        on right: 59
    jiro_exp (66)
        on left: 60
        on right: 59
    tranga_body (67)
        on left: 62
        on right: 59 66
    $@7 (68)
        on left: 61
        on right: 62
    finish_opt (69)
        on left: 63 64
        on right: 62
    tranga_opt (70)
        on left: 65 66
        on right: 59 66
    toreana_opt (71)
        on left: 67 68
        on right: 59
    return_statement (72)
        on left: 69 70
        on right: 30


State 0

    0 $accept: . program $end

    TYPE    shift, and go to state 1
    V_TYPE  shift, and go to state 2

    program        go to state 3
    function_list  go to state 4
    function       go to state 5


State 1

    5 function: TYPE . ID $@1 LPAREN param_list RPAREN body

    ID  shift, and go to state 6


State 2

    7 function: V_TYPE . ID $@2 LPAREN param_list RPAREN body

    ID  shift, and go to state 7


State 3

    0 $accept: program . $end

    $end  shift, and go to state 8


State 4

    1 program: function_list .
    3 function_list: function_list . function

    TYPE    shift, and go to state 1
    V_TYPE  shift, and go to state 2

    $default  reduce using rule 1 (program)

    function  go to state 9


State 5

    2 function_list: function .

    $default  reduce using rule 2 (function_list)


State 6

    5 function: TYPE ID . $@1 LPAREN param_list RPAREN body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 10


State 7

    7 function: V_TYPE ID . $@2 LPAREN param_list RPAREN body

    $default  reduce using rule 6 ($@2)

    $@2  go to state 11


State 8

    0 $accept: program $end .

    $default  accept


State 9

    3 function_list: function_list function .

    $default  reduce using rule 3 (function_list)


State 10

    5 function: TYPE ID $@1 . LPAREN param_list RPAREN body

    LPAREN  shift, and go to state 12


State 11

    7 function: V_TYPE ID $@2 . LPAREN param_list RPAREN body

    LPAREN  shift, and go to state 13


State 12

    5 function: TYPE ID $@1 LPAREN . param_list RPAREN body

    TYPE  shift, and go to state 14

    $default  reduce using rule 8 (param_list)

    param_list  go to state 15
    parameters  go to state 16
    parameter   go to state 17


State 13

    7 function: V_TYPE ID $@2 LPAREN . param_list RPAREN body

    TYPE  shift, and go to state 14

    $default  reduce using rule 8 (param_list)

    param_list  go to state 18
    parameters  go to state 16
    parameter   go to state 17


State 14

   12 parameter: TYPE . ID

    ID  shift, and go to state 19


State 15

    5 function: TYPE ID $@1 LPAREN param_list . RPAREN body

    RPAREN  shift, and go to state 20


State 16

    9 param_list: parameters .
   11 parameters: parameters . COMMA parameter

    COMMA  shift, and go to state 21

    $default  reduce using rule 9 (param_list)


State 17

   10 parameters: parameter .

    $default  reduce using rule 10 (parameters)


State 18

    7 function: V_TYPE ID $@2 LPAREN param_list . RPAREN body

    RPAREN  shift, and go to state 22


State 19

   12 parameter: TYPE ID .

    $default  reduce using rule 12 (parameter)


State 20

    5 function: TYPE ID $@1 LPAREN param_list RPAREN . body

    LBRACKET  shift, and go to state 23

    body  go to state 24


State 21

   11 parameters: parameters COMMA . parameter

    TYPE  shift, and go to state 14

    parameter  go to state 25


State 22

    7 function: V_TYPE ID $@2 LPAREN param_list RPAREN . body

    LBRACKET  shift, and go to state 23

    body  go to state 26


State 23

   13 body: LBRACKET . variable_list statement_list RBRACKET

    $default  reduce using rule 14 (variable_list)

    variable_list  go to state 27


State 24

    5 function: TYPE ID $@1 LPAREN param_list RPAREN body .

    $default  reduce using rule 5 (function)


State 25

   11 parameters: parameters COMMA parameter .

    $default  reduce using rule 11 (parameters)


State 26

    7 function: V_TYPE ID $@2 LPAREN param_list RPAREN body .

    $default  reduce using rule 7 (function)


State 27

   13 body: LBRACKET variable_list . statement_list RBRACKET
   15 variable_list: variable_list . variable

    TYPE      shift, and go to state 28
    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    $default  reduce using rule 20 (statement_list)

    variable              go to state 35
    statement_list        go to state 36
    statements            go to state 37
    statement             go to state 38
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 28

   17 variable: TYPE . $@3 variables SEMICOLON

    $default  reduce using rule 16 ($@3)

    $@3  go to state 47


State 29

   32 assignment_statement: ID . ASSIGN num_exp SEMICOLON
   45 function_call: ID . $@4 LPAREN argument_s RPAREN

    ASSIGN  shift, and go to state 48

    $default  reduce using rule 44 ($@4)

    $@4  go to state 49


State 30

   52 if_part: IF . LPAREN rel_exp RPAREN statement

    LPAREN  shift, and go to state 50


State 31

   69 return_statement: RETURN . num_exp SEMICOLON
   70                 | RETURN . SEMICOLON

    ID           shift, and go to state 51
    INT_NUMBER   shift, and go to state 52
    UINT_NUMBER  shift, and go to state 53
    SEMICOLON    shift, and go to state 54
    LPAREN       shift, and go to state 55

    num_exp        go to state 56
    exp            go to state 57
    literal        go to state 58
    function_call  go to state 59


State 32

   54 loop_statement: LOOP . LPAREN ID COMMA literal COMMA literal loop_opt RPAREN statement

    LPAREN  shift, and go to state 60


State 33

   59 jiro_statement: JIRO . $@5 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@6 RBRACKET

    $default  reduce using rule 57 ($@5)

    $@5  go to state 61


State 34

   31 compound_statement: LBRACKET . statement_list RBRACKET

    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    $default  reduce using rule 20 (statement_list)

    statement_list        go to state 62
    statements            go to state 37
    statement             go to state 38
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 35

   15 variable_list: variable_list variable .

    $default  reduce using rule 15 (variable_list)


State 36

   13 body: LBRACKET variable_list statement_list . RBRACKET

    RBRACKET  shift, and go to state 63


State 37

   21 statement_list: statements .
   23 statements: statements . statement

    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    $default  reduce using rule 21 (statement_list)

    statement             go to state 64
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 38

   22 statements: statement .

    $default  reduce using rule 22 (statements)


State 39

   24 statement: compound_statement .

    $default  reduce using rule 24 (statement)


State 40

   25 statement: assignment_statement .

    $default  reduce using rule 25 (statement)


State 41

   26 statement: function_call . SEMICOLON

    SEMICOLON  shift, and go to state 65


State 42

   27 statement: if_statement .

    $default  reduce using rule 27 (statement)


State 43

   50 if_statement: if_part .
   51             | if_part . ELSE statement

    ELSE  shift, and go to state 66

    $default  reduce using rule 50 (if_statement)


State 44

   28 statement: loop_statement .

    $default  reduce using rule 28 (statement)


State 45

   29 statement: jiro_statement .

    $default  reduce using rule 29 (statement)


State 46

   30 statement: return_statement .

    $default  reduce using rule 30 (statement)


State 47

   17 variable: TYPE $@3 . variables SEMICOLON

    ID  shift, and go to state 67

    variables  go to state 68


State 48

   32 assignment_statement: ID ASSIGN . num_exp SEMICOLON

    ID           shift, and go to state 51
    INT_NUMBER   shift, and go to state 52
    UINT_NUMBER  shift, and go to state 53
    LPAREN       shift, and go to state 55

    num_exp        go to state 69
    exp            go to state 57
    literal        go to state 58
    function_call  go to state 59


State 49

   45 function_call: ID $@4 . LPAREN argument_s RPAREN

    LPAREN  shift, and go to state 70


State 50

   52 if_part: IF LPAREN . rel_exp RPAREN statement

    ID           shift, and go to state 51
    INT_NUMBER   shift, and go to state 52
    UINT_NUMBER  shift, and go to state 53
    LPAREN       shift, and go to state 55

    num_exp        go to state 71
    exp            go to state 57
    literal        go to state 58
    function_call  go to state 59
    rel_exp        go to state 72


State 51

   36 exp: ID . post_op
   45 function_call: ID . $@4 LPAREN argument_s RPAREN

    PINC  shift, and go to state 73
    PDEC  shift, and go to state 74

    LPAREN    reduce using rule 44 ($@4)
    $default  reduce using rule 39 (post_op)

    post_op  go to state 75
    $@4      go to state 49


State 52

   42 literal: INT_NUMBER .

    $default  reduce using rule 42 (literal)


State 53

   43 literal: UINT_NUMBER .

    $default  reduce using rule 43 (literal)


State 54

   70 return_statement: RETURN SEMICOLON .

    $default  reduce using rule 70 (return_statement)


State 55

   38 exp: LPAREN . num_exp RPAREN

    ID           shift, and go to state 51
    INT_NUMBER   shift, and go to state 52
    UINT_NUMBER  shift, and go to state 53
    LPAREN       shift, and go to state 55

    num_exp        go to state 76
    exp            go to state 57
    literal        go to state 58
    function_call  go to state 59


State 56

   34 num_exp: num_exp . AROP exp
   69 return_statement: RETURN num_exp . SEMICOLON

    SEMICOLON  shift, and go to state 77
    AROP       shift, and go to state 78


State 57

   33 num_exp: exp .

    $default  reduce using rule 33 (num_exp)


State 58

   35 exp: literal .

    $default  reduce using rule 35 (exp)


State 59

   37 exp: function_call .

    $default  reduce using rule 37 (exp)


State 60

   54 loop_statement: LOOP LPAREN . ID COMMA literal COMMA literal loop_opt RPAREN statement

    ID  shift, and go to state 79


State 61

   59 jiro_statement: JIRO $@5 . LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@6 RBRACKET

    LABRACKET  shift, and go to state 80


State 62

   31 compound_statement: LBRACKET statement_list . RBRACKET

    RBRACKET  shift, and go to state 81


State 63

   13 body: LBRACKET variable_list statement_list RBRACKET .

    $default  reduce using rule 13 (body)


State 64

   23 statements: statements statement .

    $default  reduce using rule 23 (statements)


State 65

   26 statement: function_call SEMICOLON .

    $default  reduce using rule 26 (statement)


State 66

   51 if_statement: if_part ELSE . statement

    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    statement             go to state 82
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 67

   18 variables: ID .

    $default  reduce using rule 18 (variables)


State 68

   17 variable: TYPE $@3 variables . SEMICOLON
   19 variables: variables . COMMA ID

    SEMICOLON  shift, and go to state 83
    COMMA      shift, and go to state 84


State 69

   32 assignment_statement: ID ASSIGN num_exp . SEMICOLON
   34 num_exp: num_exp . AROP exp

    SEMICOLON  shift, and go to state 85
    AROP       shift, and go to state 78


State 70

   45 function_call: ID $@4 LPAREN . argument_s RPAREN

    ID           shift, and go to state 51
    INT_NUMBER   shift, and go to state 52
    UINT_NUMBER  shift, and go to state 53
    LPAREN       shift, and go to state 55

    $default  reduce using rule 46 (argument_s)

    num_exp        go to state 86
    exp            go to state 57
    literal        go to state 58
    function_call  go to state 59
    argument_s     go to state 87
    arguments      go to state 88


State 71

   34 num_exp: num_exp . AROP exp
   53 rel_exp: num_exp . RELOP num_exp

    AROP   shift, and go to state 78
    RELOP  shift, and go to state 89


State 72

   52 if_part: IF LPAREN rel_exp . RPAREN statement

    RPAREN  shift, and go to state 90


State 73

   40 post_op: PINC .

    $default  reduce using rule 40 (post_op)


State 74

   41 post_op: PDEC .

    $default  reduce using rule 41 (post_op)


State 75

   36 exp: ID post_op .

    $default  reduce using rule 36 (exp)


State 76

   34 num_exp: num_exp . AROP exp
   38 exp: LPAREN num_exp . RPAREN

    RPAREN  shift, and go to state 91
    AROP    shift, and go to state 78


State 77

   69 return_statement: RETURN num_exp SEMICOLON .

    $default  reduce using rule 69 (return_statement)


State 78

   34 num_exp: num_exp AROP . exp

    ID           shift, and go to state 51
    INT_NUMBER   shift, and go to state 52
    UINT_NUMBER  shift, and go to state 53
    LPAREN       shift, and go to state 55

    exp            go to state 92
    literal        go to state 58
    function_call  go to state 59


State 79

   54 loop_statement: LOOP LPAREN ID . COMMA literal COMMA literal loop_opt RPAREN statement

    COMMA  shift, and go to state 93


State 80

   59 jiro_statement: JIRO $@5 LABRACKET . jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@6 RBRACKET

    ID  shift, and go to state 94

    jiro_exp  go to state 95


State 81

   31 compound_statement: LBRACKET statement_list RBRACKET .

    $default  reduce using rule 31 (compound_statement)


State 82

   51 if_statement: if_part ELSE statement .

    $default  reduce using rule 51 (if_statement)


State 83

   17 variable: TYPE $@3 variables SEMICOLON .

    $default  reduce using rule 17 (variable)


State 84

   19 variables: variables COMMA . ID

    ID  shift, and go to state 96


State 85

   32 assignment_statement: ID ASSIGN num_exp SEMICOLON .

    $default  reduce using rule 32 (assignment_statement)


State 86

   34 num_exp: num_exp . AROP exp
   48 arguments: num_exp .

    AROP  shift, and go to state 78

    $default  reduce using rule 48 (arguments)


State 87

   45 function_call: ID $@4 LPAREN argument_s . RPAREN

    RPAREN  shift, and go to state 97


State 88

   47 argument_s: arguments .
   49 arguments: arguments . COMMA num_exp

    COMMA  shift, and go to state 98

    $default  reduce using rule 47 (argument_s)


State 89

   53 rel_exp: num_exp RELOP . num_exp

    ID           shift, and go to state 51
    INT_NUMBER   shift, and go to state 52
    UINT_NUMBER  shift, and go to state 53
    LPAREN       shift, and go to state 55

    num_exp        go to state 99
    exp            go to state 57
    literal        go to state 58
    function_call  go to state 59


State 90

   52 if_part: IF LPAREN rel_exp RPAREN . statement

    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    statement             go to state 100
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 91

   38 exp: LPAREN num_exp RPAREN .

    $default  reduce using rule 38 (exp)


State 92

   34 num_exp: num_exp AROP exp .

    $default  reduce using rule 34 (num_exp)


State 93

   54 loop_statement: LOOP LPAREN ID COMMA . literal COMMA literal loop_opt RPAREN statement

    INT_NUMBER   shift, and go to state 52
    UINT_NUMBER  shift, and go to state 53

    literal  go to state 101


State 94

   60 jiro_exp: ID .

    $default  reduce using rule 60 (jiro_exp)


State 95

   59 jiro_statement: JIRO $@5 LABRACKET jiro_exp . RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@6 RBRACKET

    RABRACKET  shift, and go to state 102


State 96

   19 variables: variables COMMA ID .

    $default  reduce using rule 19 (variables)


State 97

   45 function_call: ID $@4 LPAREN argument_s RPAREN .

    $default  reduce using rule 45 (function_call)


State 98

   49 arguments: arguments COMMA . num_exp

    ID           shift, and go to state 51
    INT_NUMBER   shift, and go to state 52
    UINT_NUMBER  shift, and go to state 53
    LPAREN       shift, and go to state 55

    num_exp        go to state 103
    exp            go to state 57
    literal        go to state 58
    function_call  go to state 59


State 99

   34 num_exp: num_exp . AROP exp
   53 rel_exp: num_exp RELOP num_exp .

    AROP  shift, and go to state 78

    $default  reduce using rule 53 (rel_exp)


State 100

   52 if_part: IF LPAREN rel_exp RPAREN statement .

    $default  reduce using rule 52 (if_part)


State 101

   54 loop_statement: LOOP LPAREN ID COMMA literal . COMMA literal loop_opt RPAREN statement

    COMMA  shift, and go to state 104


State 102

   59 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET . LBRACKET tranga_body tranga_opt toreana_opt $@6 RBRACKET

    LBRACKET  shift, and go to state 105


State 103

   34 num_exp: num_exp . AROP exp
   49 arguments: arguments COMMA num_exp .

    AROP  shift, and go to state 78

    $default  reduce using rule 49 (arguments)


State 104

   54 loop_statement: LOOP LPAREN ID COMMA literal COMMA . literal loop_opt RPAREN statement

    INT_NUMBER   shift, and go to state 52
    UINT_NUMBER  shift, and go to state 53

    literal  go to state 106


State 105

   59 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET LBRACKET . tranga_body tranga_opt toreana_opt $@6 RBRACKET

    TRANGA  shift, and go to state 107

    tranga_body  go to state 108


State 106

   54 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal . loop_opt RPAREN statement

    COMMA  shift, and go to state 109

    $default  reduce using rule 55 (loop_opt)

    loop_opt  go to state 110


State 107

   62 tranga_body: TRANGA . literal $@7 DO statement finish_opt

    INT_NUMBER   shift, and go to state 52
    UINT_NUMBER  shift, and go to state 53

    literal  go to state 111


State 108

   59 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body . tranga_opt toreana_opt $@6 RBRACKET

    TRANGA  shift, and go to state 107

    $default  reduce using rule 65 (tranga_opt)

    tranga_body  go to state 112
    tranga_opt   go to state 113


State 109

   56 loop_opt: COMMA . literal

    INT_NUMBER   shift, and go to state 52
    UINT_NUMBER  shift, and go to state 53

    literal  go to state 114


State 110

   54 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt . RPAREN statement

    RPAREN  shift, and go to state 115


State 111

   62 tranga_body: TRANGA literal . $@7 DO statement finish_opt

    $default  reduce using rule 61 ($@7)

    $@7  go to state 116


State 112

   66 tranga_opt: tranga_body . tranga_opt

    TRANGA  shift, and go to state 107

    $default  reduce using rule 65 (tranga_opt)

    tranga_body  go to state 112
    tranga_opt   go to state 117


State 113

   59 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt . toreana_opt $@6 RBRACKET

    TOREANA  shift, and go to state 118

    $default  reduce using rule 67 (toreana_opt)

    toreana_opt  go to state 119


State 114

   56 loop_opt: COMMA literal .

    $default  reduce using rule 56 (loop_opt)


State 115

   54 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt RPAREN . statement

    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    statement             go to state 120
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 116

   62 tranga_body: TRANGA literal $@7 . DO statement finish_opt

    DO  shift, and go to state 121


State 117

   66 tranga_opt: tranga_body tranga_opt .

    $default  reduce using rule 66 (tranga_opt)


State 118

   68 toreana_opt: TOREANA . DO statement

    DO  shift, and go to state 122


State 119

   59 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt . $@6 RBRACKET

    $default  reduce using rule 58 ($@6)

    $@6  go to state 123


State 120

   54 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt RPAREN statement .

    $default  reduce using rule 54 (loop_statement)


State 121

   62 tranga_body: TRANGA literal $@7 DO . statement finish_opt

    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    statement             go to state 124
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 122

   68 toreana_opt: TOREANA DO . statement

    ID        shift, and go to state 29
    IF        shift, and go to state 30
    RETURN    shift, and go to state 31
    LOOP      shift, and go to state 32
    JIRO      shift, and go to state 33
    LBRACKET  shift, and go to state 34

    statement             go to state 125
    compound_statement    go to state 39
    assignment_statement  go to state 40
    function_call         go to state 41
    if_statement          go to state 42
    if_part               go to state 43
    loop_statement        go to state 44
    jiro_statement        go to state 45
    return_statement      go to state 46


State 123

   59 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@6 . RBRACKET

    RBRACKET  shift, and go to state 126


State 124

   62 tranga_body: TRANGA literal $@7 DO statement . finish_opt

    FINISH  shift, and go to state 127

    $default  reduce using rule 63 (finish_opt)

    finish_opt  go to state 128


State 125

   68 toreana_opt: TOREANA DO statement .

    $default  reduce using rule 68 (toreana_opt)


State 126

   59 jiro_statement: JIRO $@5 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@6 RBRACKET .

    $default  reduce using rule 59 (jiro_statement)


State 127

   64 finish_opt: FINISH . SEMICOLON

    SEMICOLON  shift, and go to state 129


State 128

   62 tranga_body: TRANGA literal $@7 DO statement finish_opt .

    $default  reduce using rule 62 (tranga_body)


State 129

   64 finish_opt: FINISH SEMICOLON .

    $default  reduce using rule 64 (finish_opt)
