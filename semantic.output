Grammar

    0 $accept: program $end

    1 program: init_program function_list

    2 init_program: INIT SEMICOLON

    3 function_list: function
    4              | function_list function

    5 $@1: %empty

    6 $@2: %empty

    7 function: TYPE ID $@1 LPAREN param_list $@2 RPAREN body

    8 $@3: %empty

    9 $@4: %empty

   10 function: V_TYPE ID $@3 LPAREN param_list $@4 RPAREN body

   11 param_list: %empty
   12           | parameters

   13 parameters: parameter
   14           | parameters COMMA parameter

   15 parameter: TYPE ID

   16 body: LBRACKET variable_list statement_list RBRACKET

   17 variable_list: %empty
   18              | variable_list variable

   19 $@5: %empty

   20 variable: TYPE $@5 variables SEMICOLON

   21 variables: ID
   22          | variables COMMA ID

   23 statement_list: %empty
   24               | statements

   25 statements: statement
   26           | statements statement

   27 statement: compound_statement
   28          | assignment_statement
   29          | function_call SEMICOLON
   30          | if_statement
   31          | loop_statement
   32          | jiro_statement
   33          | return_statement

   34 compound_statement: LBRACKET statement_list RBRACKET

   35 assignment_statement: ID ASSIGN num_exp SEMICOLON

   36 num_exp: exp
   37        | num_exp AROP exp

   38 exp: literal
   39    | ID post_op
   40    | function_call
   41    | LPAREN num_exp RPAREN

   42 post_op: %empty
   43        | PINC
   44        | PDEC

   45 literal: INT_NUMBER
   46        | UINT_NUMBER

   47 $@6: %empty

   48 function_call: ID $@6 LPAREN argument_s RPAREN

   49 argument_s: %empty
   50           | arguments

   51 arguments: num_exp
   52          | arguments COMMA num_exp

   53 if_statement: if_part
   54             | if_part ELSE statement

   55 if_part: IF LPAREN rel_exp RPAREN statement

   56 rel_exp: num_exp RELOP num_exp

   57 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt RPAREN statement

   58 loop_opt: %empty
   59         | COMMA literal

   60 $@7: %empty

   61 $@8: %empty

   62 jiro_statement: JIRO $@7 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@8 RBRACKET

   63 jiro_exp: ID

   64 $@9: %empty

   65 tranga_body: TRANGA literal $@9 DO statement finish_opt

   66 finish_opt: %empty
   67           | FINISH SEMICOLON

   68 tranga_opt: %empty
   69           | tranga_body tranga_opt

   70 toreana_opt: %empty
   71            | TOREANA DO statement

   72 return_statement: RETURN num_exp SEMICOLON
   73                 | RETURN SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INIT (258) 2
    TYPE <i> (259) 7 15 20
    V_TYPE <i> (260) 10
    ID <s> (261) 7 10 15 21 22 35 39 48 57 63
    INT_NUMBER <s> (262) 45
    UINT_NUMBER <s> (263) 46
    IF (264) 55
    ELSE (265) 54
    RETURN (266) 72 73
    LOOP (267) 57
    JIRO (268) 62
    TRANGA (269) 65
    TOREANA (270) 71
    FINISH (271) 67
    LABRACKET (272) 62
    RABRACKET (273) 62
    DO (274) 65 71
    SEMICOLON (275) 2 20 29 35 67 72 73
    COMMA (276) 14 22 52 57 59
    LPAREN (277) 7 10 41 48 55 57
    RPAREN (278) 7 10 41 48 55 57
    LBRACKET (279) 16 34 62
    RBRACKET (280) 16 34 62
    ASSIGN (281) 35
    AROP <i> (282) 37
    PINC (283) 43
    PDEC (284) 44
    RELOP <i> (285) 56
    ONLY_IF (286)


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1
        on right: 0
    init_program (34)
        on left: 2
        on right: 1
    function_list (35)
        on left: 3 4
        on right: 1 4
    function (36)
        on left: 7 10
        on right: 3 4
    $@1 (37)
        on left: 5
        on right: 7
    $@2 (38)
        on left: 6
        on right: 7
    $@3 (39)
        on left: 8
        on right: 10
    $@4 (40)
        on left: 9
        on right: 10
    param_list (41)
        on left: 11 12
        on right: 7 10
    parameters (42)
        on left: 13 14
        on right: 12 14
    parameter (43)
        on left: 15
        on right: 13 14
    body (44)
        on left: 16
        on right: 7 10
    variable_list (45)
        on left: 17 18
        on right: 16 18
    variable (46)
        on left: 20
        on right: 18
    $@5 (47)
        on left: 19
        on right: 20
    variables (48)
        on left: 21 22
        on right: 20 22
    statement_list (49)
        on left: 23 24
        on right: 16 34
    statements (50)
        on left: 25 26
        on right: 24 26
    statement (51)
        on left: 27 28 29 30 31 32 33
        on right: 25 26 54 55 57 65 71
    compound_statement (52)
        on left: 34
        on right: 27
    assignment_statement (53)
        on left: 35
        on right: 28
    num_exp <i> (54)
        on left: 36 37
        on right: 35 37 41 51 52 56 72
    exp <i> (55)
        on left: 38 39 40 41
        on right: 36 37
    post_op (56)
        on left: 42 43 44
        on right: 39
    literal <i> (57)
        on left: 45 46
        on right: 38 57 59 65
    function_call <i> (58)
        on left: 48
        on right: 29 40
    $@6 (59)
        on left: 47
        on right: 48
    argument_s (60)
        on left: 49 50
        on right: 48
    arguments <i> (61)
        on left: 51 52
        on right: 50 52
    if_statement (62)
        on left: 53 54
        on right: 30
    if_part (63)
        on left: 55
        on right: 53 54
    rel_exp <i> (64)
        on left: 56
        on right: 55
    loop_statement (65)
        on left: 57
        on right: 31
    loop_opt (66)
        on left: 58 59
        on right: 57
    jiro_statement (67)
        on left: 62
        on right: 32
    $@7 (68)
        on left: 60
        on right: 62
    $@8 (69)
        on left: 61
        on right: 62
    jiro_exp (70)
        on left: 63
        on right: 62
    tranga_body (71)
        on left: 65
        on right: 62 69
    $@9 (72)
        on left: 64
        on right: 65
    finish_opt (73)
        on left: 66 67
        on right: 65
    tranga_opt (74)
        on left: 68 69
        on right: 62 69
    toreana_opt (75)
        on left: 70 71
        on right: 62
    return_statement (76)
        on left: 72 73
        on right: 33


State 0

    0 $accept: . program $end

    INIT  shift, and go to state 1

    program       go to state 2
    init_program  go to state 3


State 1

    2 init_program: INIT . SEMICOLON

    SEMICOLON  shift, and go to state 4


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

    1 program: init_program . function_list

    TYPE    shift, and go to state 6
    V_TYPE  shift, and go to state 7

    function_list  go to state 8
    function       go to state 9


State 4

    2 init_program: INIT SEMICOLON .

    $default  reduce using rule 2 (init_program)


State 5

    0 $accept: program $end .

    $default  accept


State 6

    7 function: TYPE . ID $@1 LPAREN param_list $@2 RPAREN body

    ID  shift, and go to state 10


State 7

   10 function: V_TYPE . ID $@3 LPAREN param_list $@4 RPAREN body

    ID  shift, and go to state 11


State 8

    1 program: init_program function_list .
    4 function_list: function_list . function

    TYPE    shift, and go to state 6
    V_TYPE  shift, and go to state 7

    $default  reduce using rule 1 (program)

    function  go to state 12


State 9

    3 function_list: function .

    $default  reduce using rule 3 (function_list)


State 10

    7 function: TYPE ID . $@1 LPAREN param_list $@2 RPAREN body

    $default  reduce using rule 5 ($@1)

    $@1  go to state 13


State 11

   10 function: V_TYPE ID . $@3 LPAREN param_list $@4 RPAREN body

    $default  reduce using rule 8 ($@3)

    $@3  go to state 14


State 12

    4 function_list: function_list function .

    $default  reduce using rule 4 (function_list)


State 13

    7 function: TYPE ID $@1 . LPAREN param_list $@2 RPAREN body

    LPAREN  shift, and go to state 15


State 14

   10 function: V_TYPE ID $@3 . LPAREN param_list $@4 RPAREN body

    LPAREN  shift, and go to state 16


State 15

    7 function: TYPE ID $@1 LPAREN . param_list $@2 RPAREN body

    TYPE  shift, and go to state 17

    $default  reduce using rule 11 (param_list)

    param_list  go to state 18
    parameters  go to state 19
    parameter   go to state 20


State 16

   10 function: V_TYPE ID $@3 LPAREN . param_list $@4 RPAREN body

    TYPE  shift, and go to state 17

    $default  reduce using rule 11 (param_list)

    param_list  go to state 21
    parameters  go to state 19
    parameter   go to state 20


State 17

   15 parameter: TYPE . ID

    ID  shift, and go to state 22


State 18

    7 function: TYPE ID $@1 LPAREN param_list . $@2 RPAREN body

    $default  reduce using rule 6 ($@2)

    $@2  go to state 23


State 19

   12 param_list: parameters .
   14 parameters: parameters . COMMA parameter

    COMMA  shift, and go to state 24

    $default  reduce using rule 12 (param_list)


State 20

   13 parameters: parameter .

    $default  reduce using rule 13 (parameters)


State 21

   10 function: V_TYPE ID $@3 LPAREN param_list . $@4 RPAREN body

    $default  reduce using rule 9 ($@4)

    $@4  go to state 25


State 22

   15 parameter: TYPE ID .

    $default  reduce using rule 15 (parameter)


State 23

    7 function: TYPE ID $@1 LPAREN param_list $@2 . RPAREN body

    RPAREN  shift, and go to state 26


State 24

   14 parameters: parameters COMMA . parameter

    TYPE  shift, and go to state 17

    parameter  go to state 27


State 25

   10 function: V_TYPE ID $@3 LPAREN param_list $@4 . RPAREN body

    RPAREN  shift, and go to state 28


State 26

    7 function: TYPE ID $@1 LPAREN param_list $@2 RPAREN . body

    LBRACKET  shift, and go to state 29

    body  go to state 30


State 27

   14 parameters: parameters COMMA parameter .

    $default  reduce using rule 14 (parameters)


State 28

   10 function: V_TYPE ID $@3 LPAREN param_list $@4 RPAREN . body

    LBRACKET  shift, and go to state 29

    body  go to state 31


State 29

   16 body: LBRACKET . variable_list statement_list RBRACKET

    $default  reduce using rule 17 (variable_list)

    variable_list  go to state 32


State 30

    7 function: TYPE ID $@1 LPAREN param_list $@2 RPAREN body .

    $default  reduce using rule 7 (function)


State 31

   10 function: V_TYPE ID $@3 LPAREN param_list $@4 RPAREN body .

    $default  reduce using rule 10 (function)


State 32

   16 body: LBRACKET variable_list . statement_list RBRACKET
   18 variable_list: variable_list . variable

    TYPE      shift, and go to state 33
    ID        shift, and go to state 34
    IF        shift, and go to state 35
    RETURN    shift, and go to state 36
    LOOP      shift, and go to state 37
    JIRO      shift, and go to state 38
    LBRACKET  shift, and go to state 39

    $default  reduce using rule 23 (statement_list)

    variable              go to state 40
    statement_list        go to state 41
    statements            go to state 42
    statement             go to state 43
    compound_statement    go to state 44
    assignment_statement  go to state 45
    function_call         go to state 46
    if_statement          go to state 47
    if_part               go to state 48
    loop_statement        go to state 49
    jiro_statement        go to state 50
    return_statement      go to state 51


State 33

   20 variable: TYPE . $@5 variables SEMICOLON

    $default  reduce using rule 19 ($@5)

    $@5  go to state 52


State 34

   35 assignment_statement: ID . ASSIGN num_exp SEMICOLON
   48 function_call: ID . $@6 LPAREN argument_s RPAREN

    ASSIGN  shift, and go to state 53

    $default  reduce using rule 47 ($@6)

    $@6  go to state 54


State 35

   55 if_part: IF . LPAREN rel_exp RPAREN statement

    LPAREN  shift, and go to state 55


State 36

   72 return_statement: RETURN . num_exp SEMICOLON
   73                 | RETURN . SEMICOLON

    ID           shift, and go to state 56
    INT_NUMBER   shift, and go to state 57
    UINT_NUMBER  shift, and go to state 58
    SEMICOLON    shift, and go to state 59
    LPAREN       shift, and go to state 60

    num_exp        go to state 61
    exp            go to state 62
    literal        go to state 63
    function_call  go to state 64


State 37

   57 loop_statement: LOOP . LPAREN ID COMMA literal COMMA literal loop_opt RPAREN statement

    LPAREN  shift, and go to state 65


State 38

   62 jiro_statement: JIRO . $@7 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@8 RBRACKET

    $default  reduce using rule 60 ($@7)

    $@7  go to state 66


State 39

   34 compound_statement: LBRACKET . statement_list RBRACKET

    ID        shift, and go to state 34
    IF        shift, and go to state 35
    RETURN    shift, and go to state 36
    LOOP      shift, and go to state 37
    JIRO      shift, and go to state 38
    LBRACKET  shift, and go to state 39

    $default  reduce using rule 23 (statement_list)

    statement_list        go to state 67
    statements            go to state 42
    statement             go to state 43
    compound_statement    go to state 44
    assignment_statement  go to state 45
    function_call         go to state 46
    if_statement          go to state 47
    if_part               go to state 48
    loop_statement        go to state 49
    jiro_statement        go to state 50
    return_statement      go to state 51


State 40

   18 variable_list: variable_list variable .

    $default  reduce using rule 18 (variable_list)


State 41

   16 body: LBRACKET variable_list statement_list . RBRACKET

    RBRACKET  shift, and go to state 68


State 42

   24 statement_list: statements .
   26 statements: statements . statement

    ID        shift, and go to state 34
    IF        shift, and go to state 35
    RETURN    shift, and go to state 36
    LOOP      shift, and go to state 37
    JIRO      shift, and go to state 38
    LBRACKET  shift, and go to state 39

    $default  reduce using rule 24 (statement_list)

    statement             go to state 69
    compound_statement    go to state 44
    assignment_statement  go to state 45
    function_call         go to state 46
    if_statement          go to state 47
    if_part               go to state 48
    loop_statement        go to state 49
    jiro_statement        go to state 50
    return_statement      go to state 51


State 43

   25 statements: statement .

    $default  reduce using rule 25 (statements)


State 44

   27 statement: compound_statement .

    $default  reduce using rule 27 (statement)


State 45

   28 statement: assignment_statement .

    $default  reduce using rule 28 (statement)


State 46

   29 statement: function_call . SEMICOLON

    SEMICOLON  shift, and go to state 70


State 47

   30 statement: if_statement .

    $default  reduce using rule 30 (statement)


State 48

   53 if_statement: if_part .
   54             | if_part . ELSE statement

    ELSE  shift, and go to state 71

    $default  reduce using rule 53 (if_statement)


State 49

   31 statement: loop_statement .

    $default  reduce using rule 31 (statement)


State 50

   32 statement: jiro_statement .

    $default  reduce using rule 32 (statement)


State 51

   33 statement: return_statement .

    $default  reduce using rule 33 (statement)


State 52

   20 variable: TYPE $@5 . variables SEMICOLON

    ID  shift, and go to state 72

    variables  go to state 73


State 53

   35 assignment_statement: ID ASSIGN . num_exp SEMICOLON

    ID           shift, and go to state 56
    INT_NUMBER   shift, and go to state 57
    UINT_NUMBER  shift, and go to state 58
    LPAREN       shift, and go to state 60

    num_exp        go to state 74
    exp            go to state 62
    literal        go to state 63
    function_call  go to state 64


State 54

   48 function_call: ID $@6 . LPAREN argument_s RPAREN

    LPAREN  shift, and go to state 75


State 55

   55 if_part: IF LPAREN . rel_exp RPAREN statement

    ID           shift, and go to state 56
    INT_NUMBER   shift, and go to state 57
    UINT_NUMBER  shift, and go to state 58
    LPAREN       shift, and go to state 60

    num_exp        go to state 76
    exp            go to state 62
    literal        go to state 63
    function_call  go to state 64
    rel_exp        go to state 77


State 56

   39 exp: ID . post_op
   48 function_call: ID . $@6 LPAREN argument_s RPAREN

    PINC  shift, and go to state 78
    PDEC  shift, and go to state 79

    LPAREN    reduce using rule 47 ($@6)
    $default  reduce using rule 42 (post_op)

    post_op  go to state 80
    $@6      go to state 54


State 57

   45 literal: INT_NUMBER .

    $default  reduce using rule 45 (literal)


State 58

   46 literal: UINT_NUMBER .

    $default  reduce using rule 46 (literal)


State 59

   73 return_statement: RETURN SEMICOLON .

    $default  reduce using rule 73 (return_statement)


State 60

   41 exp: LPAREN . num_exp RPAREN

    ID           shift, and go to state 56
    INT_NUMBER   shift, and go to state 57
    UINT_NUMBER  shift, and go to state 58
    LPAREN       shift, and go to state 60

    num_exp        go to state 81
    exp            go to state 62
    literal        go to state 63
    function_call  go to state 64


State 61

   37 num_exp: num_exp . AROP exp
   72 return_statement: RETURN num_exp . SEMICOLON

    SEMICOLON  shift, and go to state 82
    AROP       shift, and go to state 83


State 62

   36 num_exp: exp .

    $default  reduce using rule 36 (num_exp)


State 63

   38 exp: literal .

    $default  reduce using rule 38 (exp)


State 64

   40 exp: function_call .

    $default  reduce using rule 40 (exp)


State 65

   57 loop_statement: LOOP LPAREN . ID COMMA literal COMMA literal loop_opt RPAREN statement

    ID  shift, and go to state 84


State 66

   62 jiro_statement: JIRO $@7 . LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@8 RBRACKET

    LABRACKET  shift, and go to state 85


State 67

   34 compound_statement: LBRACKET statement_list . RBRACKET

    RBRACKET  shift, and go to state 86


State 68

   16 body: LBRACKET variable_list statement_list RBRACKET .

    $default  reduce using rule 16 (body)


State 69

   26 statements: statements statement .

    $default  reduce using rule 26 (statements)


State 70

   29 statement: function_call SEMICOLON .

    $default  reduce using rule 29 (statement)


State 71

   54 if_statement: if_part ELSE . statement

    ID        shift, and go to state 34
    IF        shift, and go to state 35
    RETURN    shift, and go to state 36
    LOOP      shift, and go to state 37
    JIRO      shift, and go to state 38
    LBRACKET  shift, and go to state 39

    statement             go to state 87
    compound_statement    go to state 44
    assignment_statement  go to state 45
    function_call         go to state 46
    if_statement          go to state 47
    if_part               go to state 48
    loop_statement        go to state 49
    jiro_statement        go to state 50
    return_statement      go to state 51


State 72

   21 variables: ID .

    $default  reduce using rule 21 (variables)


State 73

   20 variable: TYPE $@5 variables . SEMICOLON
   22 variables: variables . COMMA ID

    SEMICOLON  shift, and go to state 88
    COMMA      shift, and go to state 89


State 74

   35 assignment_statement: ID ASSIGN num_exp . SEMICOLON
   37 num_exp: num_exp . AROP exp

    SEMICOLON  shift, and go to state 90
    AROP       shift, and go to state 83


State 75

   48 function_call: ID $@6 LPAREN . argument_s RPAREN

    ID           shift, and go to state 56
    INT_NUMBER   shift, and go to state 57
    UINT_NUMBER  shift, and go to state 58
    LPAREN       shift, and go to state 60

    $default  reduce using rule 49 (argument_s)

    num_exp        go to state 91
    exp            go to state 62
    literal        go to state 63
    function_call  go to state 64
    argument_s     go to state 92
    arguments      go to state 93


State 76

   37 num_exp: num_exp . AROP exp
   56 rel_exp: num_exp . RELOP num_exp

    AROP   shift, and go to state 83
    RELOP  shift, and go to state 94


State 77

   55 if_part: IF LPAREN rel_exp . RPAREN statement

    RPAREN  shift, and go to state 95


State 78

   43 post_op: PINC .

    $default  reduce using rule 43 (post_op)


State 79

   44 post_op: PDEC .

    $default  reduce using rule 44 (post_op)


State 80

   39 exp: ID post_op .

    $default  reduce using rule 39 (exp)


State 81

   37 num_exp: num_exp . AROP exp
   41 exp: LPAREN num_exp . RPAREN

    RPAREN  shift, and go to state 96
    AROP    shift, and go to state 83


State 82

   72 return_statement: RETURN num_exp SEMICOLON .

    $default  reduce using rule 72 (return_statement)


State 83

   37 num_exp: num_exp AROP . exp

    ID           shift, and go to state 56
    INT_NUMBER   shift, and go to state 57
    UINT_NUMBER  shift, and go to state 58
    LPAREN       shift, and go to state 60

    exp            go to state 97
    literal        go to state 63
    function_call  go to state 64


State 84

   57 loop_statement: LOOP LPAREN ID . COMMA literal COMMA literal loop_opt RPAREN statement

    COMMA  shift, and go to state 98


State 85

   62 jiro_statement: JIRO $@7 LABRACKET . jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@8 RBRACKET

    ID  shift, and go to state 99

    jiro_exp  go to state 100


State 86

   34 compound_statement: LBRACKET statement_list RBRACKET .

    $default  reduce using rule 34 (compound_statement)


State 87

   54 if_statement: if_part ELSE statement .

    $default  reduce using rule 54 (if_statement)


State 88

   20 variable: TYPE $@5 variables SEMICOLON .

    $default  reduce using rule 20 (variable)


State 89

   22 variables: variables COMMA . ID

    ID  shift, and go to state 101


State 90

   35 assignment_statement: ID ASSIGN num_exp SEMICOLON .

    $default  reduce using rule 35 (assignment_statement)


State 91

   37 num_exp: num_exp . AROP exp
   51 arguments: num_exp .

    AROP  shift, and go to state 83

    $default  reduce using rule 51 (arguments)


State 92

   48 function_call: ID $@6 LPAREN argument_s . RPAREN

    RPAREN  shift, and go to state 102


State 93

   50 argument_s: arguments .
   52 arguments: arguments . COMMA num_exp

    COMMA  shift, and go to state 103

    $default  reduce using rule 50 (argument_s)


State 94

   56 rel_exp: num_exp RELOP . num_exp

    ID           shift, and go to state 56
    INT_NUMBER   shift, and go to state 57
    UINT_NUMBER  shift, and go to state 58
    LPAREN       shift, and go to state 60

    num_exp        go to state 104
    exp            go to state 62
    literal        go to state 63
    function_call  go to state 64


State 95

   55 if_part: IF LPAREN rel_exp RPAREN . statement

    ID        shift, and go to state 34
    IF        shift, and go to state 35
    RETURN    shift, and go to state 36
    LOOP      shift, and go to state 37
    JIRO      shift, and go to state 38
    LBRACKET  shift, and go to state 39

    statement             go to state 105
    compound_statement    go to state 44
    assignment_statement  go to state 45
    function_call         go to state 46
    if_statement          go to state 47
    if_part               go to state 48
    loop_statement        go to state 49
    jiro_statement        go to state 50
    return_statement      go to state 51


State 96

   41 exp: LPAREN num_exp RPAREN .

    $default  reduce using rule 41 (exp)


State 97

   37 num_exp: num_exp AROP exp .

    $default  reduce using rule 37 (num_exp)


State 98

   57 loop_statement: LOOP LPAREN ID COMMA . literal COMMA literal loop_opt RPAREN statement

    INT_NUMBER   shift, and go to state 57
    UINT_NUMBER  shift, and go to state 58

    literal  go to state 106


State 99

   63 jiro_exp: ID .

    $default  reduce using rule 63 (jiro_exp)


State 100

   62 jiro_statement: JIRO $@7 LABRACKET jiro_exp . RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@8 RBRACKET

    RABRACKET  shift, and go to state 107


State 101

   22 variables: variables COMMA ID .

    $default  reduce using rule 22 (variables)


State 102

   48 function_call: ID $@6 LPAREN argument_s RPAREN .

    $default  reduce using rule 48 (function_call)


State 103

   52 arguments: arguments COMMA . num_exp

    ID           shift, and go to state 56
    INT_NUMBER   shift, and go to state 57
    UINT_NUMBER  shift, and go to state 58
    LPAREN       shift, and go to state 60

    num_exp        go to state 108
    exp            go to state 62
    literal        go to state 63
    function_call  go to state 64


State 104

   37 num_exp: num_exp . AROP exp
   56 rel_exp: num_exp RELOP num_exp .

    AROP  shift, and go to state 83

    $default  reduce using rule 56 (rel_exp)


State 105

   55 if_part: IF LPAREN rel_exp RPAREN statement .

    $default  reduce using rule 55 (if_part)


State 106

   57 loop_statement: LOOP LPAREN ID COMMA literal . COMMA literal loop_opt RPAREN statement

    COMMA  shift, and go to state 109


State 107

   62 jiro_statement: JIRO $@7 LABRACKET jiro_exp RABRACKET . LBRACKET tranga_body tranga_opt toreana_opt $@8 RBRACKET

    LBRACKET  shift, and go to state 110


State 108

   37 num_exp: num_exp . AROP exp
   52 arguments: arguments COMMA num_exp .

    AROP  shift, and go to state 83

    $default  reduce using rule 52 (arguments)


State 109

   57 loop_statement: LOOP LPAREN ID COMMA literal COMMA . literal loop_opt RPAREN statement

    INT_NUMBER   shift, and go to state 57
    UINT_NUMBER  shift, and go to state 58

    literal  go to state 111


State 110

   62 jiro_statement: JIRO $@7 LABRACKET jiro_exp RABRACKET LBRACKET . tranga_body tranga_opt toreana_opt $@8 RBRACKET

    TRANGA  shift, and go to state 112

    tranga_body  go to state 113


State 111

   57 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal . loop_opt RPAREN statement

    COMMA  shift, and go to state 114

    $default  reduce using rule 58 (loop_opt)

    loop_opt  go to state 115


State 112

   65 tranga_body: TRANGA . literal $@9 DO statement finish_opt

    INT_NUMBER   shift, and go to state 57
    UINT_NUMBER  shift, and go to state 58

    literal  go to state 116


State 113

   62 jiro_statement: JIRO $@7 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body . tranga_opt toreana_opt $@8 RBRACKET

    TRANGA  shift, and go to state 112

    $default  reduce using rule 68 (tranga_opt)

    tranga_body  go to state 117
    tranga_opt   go to state 118


State 114

   59 loop_opt: COMMA . literal

    INT_NUMBER   shift, and go to state 57
    UINT_NUMBER  shift, and go to state 58

    literal  go to state 119


State 115

   57 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt . RPAREN statement

    RPAREN  shift, and go to state 120


State 116

   65 tranga_body: TRANGA literal . $@9 DO statement finish_opt

    $default  reduce using rule 64 ($@9)

    $@9  go to state 121


State 117

   69 tranga_opt: tranga_body . tranga_opt

    TRANGA  shift, and go to state 112

    $default  reduce using rule 68 (tranga_opt)

    tranga_body  go to state 117
    tranga_opt   go to state 122


State 118

   62 jiro_statement: JIRO $@7 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt . toreana_opt $@8 RBRACKET

    TOREANA  shift, and go to state 123

    $default  reduce using rule 70 (toreana_opt)

    toreana_opt  go to state 124


State 119

   59 loop_opt: COMMA literal .

    $default  reduce using rule 59 (loop_opt)


State 120

   57 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt RPAREN . statement

    ID        shift, and go to state 34
    IF        shift, and go to state 35
    RETURN    shift, and go to state 36
    LOOP      shift, and go to state 37
    JIRO      shift, and go to state 38
    LBRACKET  shift, and go to state 39

    statement             go to state 125
    compound_statement    go to state 44
    assignment_statement  go to state 45
    function_call         go to state 46
    if_statement          go to state 47
    if_part               go to state 48
    loop_statement        go to state 49
    jiro_statement        go to state 50
    return_statement      go to state 51


State 121

   65 tranga_body: TRANGA literal $@9 . DO statement finish_opt

    DO  shift, and go to state 126


State 122

   69 tranga_opt: tranga_body tranga_opt .

    $default  reduce using rule 69 (tranga_opt)


State 123

   71 toreana_opt: TOREANA . DO statement

    DO  shift, and go to state 127


State 124

   62 jiro_statement: JIRO $@7 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt . $@8 RBRACKET

    $default  reduce using rule 61 ($@8)

    $@8  go to state 128


State 125

   57 loop_statement: LOOP LPAREN ID COMMA literal COMMA literal loop_opt RPAREN statement .

    $default  reduce using rule 57 (loop_statement)


State 126

   65 tranga_body: TRANGA literal $@9 DO . statement finish_opt

    ID        shift, and go to state 34
    IF        shift, and go to state 35
    RETURN    shift, and go to state 36
    LOOP      shift, and go to state 37
    JIRO      shift, and go to state 38
    LBRACKET  shift, and go to state 39

    statement             go to state 129
    compound_statement    go to state 44
    assignment_statement  go to state 45
    function_call         go to state 46
    if_statement          go to state 47
    if_part               go to state 48
    loop_statement        go to state 49
    jiro_statement        go to state 50
    return_statement      go to state 51


State 127

   71 toreana_opt: TOREANA DO . statement

    ID        shift, and go to state 34
    IF        shift, and go to state 35
    RETURN    shift, and go to state 36
    LOOP      shift, and go to state 37
    JIRO      shift, and go to state 38
    LBRACKET  shift, and go to state 39

    statement             go to state 130
    compound_statement    go to state 44
    assignment_statement  go to state 45
    function_call         go to state 46
    if_statement          go to state 47
    if_part               go to state 48
    loop_statement        go to state 49
    jiro_statement        go to state 50
    return_statement      go to state 51


State 128

   62 jiro_statement: JIRO $@7 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@8 . RBRACKET

    RBRACKET  shift, and go to state 131


State 129

   65 tranga_body: TRANGA literal $@9 DO statement . finish_opt

    FINISH  shift, and go to state 132

    $default  reduce using rule 66 (finish_opt)

    finish_opt  go to state 133


State 130

   71 toreana_opt: TOREANA DO statement .

    $default  reduce using rule 71 (toreana_opt)


State 131

   62 jiro_statement: JIRO $@7 LABRACKET jiro_exp RABRACKET LBRACKET tranga_body tranga_opt toreana_opt $@8 RBRACKET .

    $default  reduce using rule 62 (jiro_statement)


State 132

   67 finish_opt: FINISH . SEMICOLON

    SEMICOLON  shift, and go to state 134


State 133

   65 tranga_body: TRANGA literal $@9 DO statement finish_opt .

    $default  reduce using rule 65 (tranga_body)


State 134

   67 finish_opt: FINISH SEMICOLON .

    $default  reduce using rule 67 (finish_opt)
